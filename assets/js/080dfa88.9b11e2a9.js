"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),f=i,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},68245:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={title:"iAck",sidebar_position:3},o="iAck Function",c={unversionedId:"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck",id:"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck",title:"iAck",description:"After executing the iReceive function, an acknowledgment is generated from Router's destination chain Gateway contract that specifies whether or not the calls were successful. To handle this acknowledgment, it is necessary to implement an iAck function in the source chain contract. The schema for the function is given below:",source:"@site/docs/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck.md",sourceDirName:"message-transfer-via-crosstalk/evm-guides/iDapp-functions",slug:"/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"iAck",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"iReceive",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iReceive"},next:{title:"setDappMetadata",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/setDappMetadata"}},s={},l=[{value:"1) <code>requestIdentifier</code>",id:"1-requestidentifier",level:3},{value:"2) <code>execFlag</code>",id:"2-execflag",level:3},{value:"3) <code>execData</code>",id:"3-execdata",level:3}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"iack-function"},(0,i.kt)("inlineCode",{parentName:"h1"},"iAck")," Function"),(0,i.kt)("p",null,"After executing the ",(0,i.kt)("inlineCode",{parentName:"p"},"iReceive")," function, an acknowledgment is generated from Router's destination chain Gateway contract that specifies whether or not the calls were successful. To handle this acknowledgment, it is necessary to implement an ",(0,i.kt)("inlineCode",{parentName:"p"},"iAck")," function in the source chain contract. The schema for the function is given below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function iAck(\n    uint256 requestIdentifier,\n    bool execFlag,\n    bytes memory execData\n  ) external\n")),(0,i.kt)("p",null,"If you choose not to receive the acknowledgment, then you can create an empty function with the following schema to replace it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function iAck(\n    uint256 requestIdentifier,\n    bool execFlag,\n    bytes memory execData\n  ) external {}\n")),(0,i.kt)("p",null,"If you have opted to receive the acknowledgment, it is necessary to handle it inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"iAck")," function. The function has the following parameters:"),(0,i.kt)("h3",{id:"1-requestidentifier"},"1) ",(0,i.kt)("inlineCode",{parentName:"h3"},"requestIdentifier")),(0,i.kt)("p",null,"The nonce received while calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"iSend()")," function on the source chain Gateway contract is the same nonce that is passed to this function. With this nonce, you can map the acknowledgment to a specific request."),(0,i.kt)("h3",{id:"2-execflag"},"2) ",(0,i.kt)("inlineCode",{parentName:"h3"},"execFlag")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"execFlag")," is a boolean value that tells you the status of your call or request."),(0,i.kt)("h3",{id:"3-execdata"},"3) ",(0,i.kt)("inlineCode",{parentName:"h3"},"execData")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"execData")," parameter of the ",(0,i.kt)("inlineCode",{parentName:"p"},"iAck")," function represents the encoded return value from the ",(0,i.kt)("inlineCode",{parentName:"p"},"iReceive")," function on the destination chain, delivered as bytes. After decoding this data, it can be processed on the source chain based on the requirements of the application."))}p.isMDXComponent=!0}}]);