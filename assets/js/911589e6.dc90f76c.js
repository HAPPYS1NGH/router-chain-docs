"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[7792],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(g,i(i({ref:t},l),{},{components:n})):a.createElement(g,i({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"2) Deploying a Sample Application Contract",sidebar_position:2},i=void 0,p={unversionedId:"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",id:"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",title:"2) Deploying a Sample Application Contract",description:"Part 1: Compiling our Application Contract",source:"@site/docs/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract.md",sourceDirName:"guides/your-first-omnichain-dapp",slug:"/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",permalink:"/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"2) Deploying a Sample Application Contract",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"1) Setting up Router's EVM Tesnet",permalink:"/omnichain-framework/guides/your-first-omnichain-dapp/setting-up-routers-evm-devnet"},next:{title:"3) Deploying a Sample Bridge Contract",permalink:"/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-bridge-contract"}},s={},c=[{value:"Part 1: Compiling our Application Contract",id:"part-1-compiling-our-application-contract",level:2},{value:"Part 2: Deploying a Compiled Contract",id:"part-2-deploying-a-compiled-contract",level:2}],l=(m="APIData",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const d={toc:c};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"part-1-compiling-our-application-contract"},"Part 1: Compiling our Application Contract"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1)")," Go to ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"https://remix.ethereum.org/")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2)")," In the File Explorer pane, click on the plus icon under the ",(0,r.kt)("strong",{parentName:"p"},"Workspaces")," tab to create a new workspace."),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(88113).Z,alt:"Step 2",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3)")," Under the template option, choose ",(0,r.kt)("strong",{parentName:"p"},"Blank"),", give your workspace an appropriate name and then click on ",(0,r.kt)("strong",{parentName:"p"},"OK"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(99365).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4)")," In your new workspace, create a new file by the name of ",(0,r.kt)("strong",{parentName:"p"},"HelloRouter.sol"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(83748).Z,alt:"Step 4",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 5)")," Copy the following code and paste it into ",(0,r.kt)("strong",{parentName:"p"},"HelloRouter.sol"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport "@routerprotocol/evm-gateway-contracts@1.1.11/contracts/IGateway.sol";\nimport "hardhat/console.sol";\n\ncontract HelloRouter {\n    address public owner;\n    IGateway public gatewayContract;\n    string public greeting;\n\n    error CustomError(string message);\n\n    constructor(address payable gatewayAddress, string memory _feePayer) {\n        owner = msg.sender;\n        gatewayContract = IGateway(gatewayAddress);\n        setDappMetadata(_feePayer);\n    }\n\n    function setDappMetadata(string memory FeePayer) public {\n        require(msg.sender == owner, "Only Owner can set fee payer");\n        gatewayContract.setDappMetadata(FeePayer);\n    }\n\n    function iSend(\n    string calldata destChainId,\n    string calldata destinationContractAddress,\n    string calldata str,\n    bytes calldata requestMetadata\n    ) public payable {\n    bytes memory packet = abi.encode(str);\n    bytes memory requestPacket = abi.encode(destinationContractAddress, packet);\n    gatewayContract.iSend{ value: msg.value }(\n      1,\n      0,\n      string(""),\n      destChainId,\n      requestMetadata,\n      requestPacket\n    );\n    }\n\n    function iReceive(\n    string memory ,//requestSender,\n    bytes memory packet,\n    string memory //srcChainId\n  ) external returns (string memory) {\n    require(msg.sender == address(gatewayContract), "only gateway");\n    greeting = abi.decode(\n      packet,\n      (string)\n    );\n    if (\n      keccak256(abi.encodePacked(greeting)) == keccak256(abi.encodePacked(""))\n    ) {\n      revert CustomError("String should not be empty");\n    }\n    return greeting;\n  }\n\n    receive() external payable {}\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 6)")," Click on the ",(0,r.kt)("strong",{parentName:"p"},"Solidity compiler")," icon (the one shaped like an S), check that your compiler version is within the versions specified in the pragma solidity statement, and click on ",(0,r.kt)("strong",{parentName:"p"},"Compile HelloRouter.sol"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(90610).Z,alt:"Step 6",style:{marginBottom:12}})),(0,r.kt)("p",null,"Once compiled, you should see a green tick mark over the ",(0,r.kt)("strong",{parentName:"p"},"Solidity compiler")," icon."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"part-2-deploying-a-compiled-contract"},"Part 2: Deploying a Compiled Contract"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1)")," Click on the ",(0,r.kt)("strong",{parentName:"p"},"Deploy & run transactions")," icon (the one with the Ethereum logo) and select ",(0,r.kt)("strong",{parentName:"p"},"Injected Provider - Metamask")," as the ",(0,r.kt)("strong",{parentName:"p"},"Environment"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(38725).Z,alt:"Step 1",style:{marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2)")," A MetaMask window will pop up following the previous step. Connect the account that we set up in the guide given ",(0,r.kt)("a",{parentName:"p",href:"./setting-up-routers-evm-devnet#part-2-importing-a-wallet-to-interact-with-the-devnet"},"here"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warning:")," Make sure you're connected to Router's EVM Testnet.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3)")," Add the gateway address for respective chain from (mentioned in below table), click on ",(0,r.kt)("strong",{parentName:"p"},"Deploy")," and sign the transaction in your MetaMask."),(0,r.kt)(l,{apiData:[{apiUrl:"https://lcd.testnet.routerchain.dev/router-protocol/router-chain/multichain/chain_config",networkType:"Testnet"}],mdxType:"APIData"}),(0,r.kt)("p",{style:{marginBottom:"50px"}}),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(91646).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,"Sometimes the contract deployment fails due to low gas fees, so make sure to edit the gas fees while signing the transaction in your wallet."),(0,r.kt)("center",null,(0,r.kt)("img",{src:n(27347).Z,alt:"Success",style:{marginBottom:12}})))}u.isMDXComponent=!0},38725:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/part-2-step-1-b5a5b49e8dd3220452bf083dad7bebed.png"},91646:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/part-2-step-3-f2839063f0491140a784aa6f0ab2f4fc.png"},88113:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/step-2-bd5c9bbf57fe6894c0b0982168688706.png"},99365:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/step-3-13901af99eb5e31c636a395f286f90d3.png"},83748:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/step-4-239ecbf1cce83339da6d0083470813c9.png"},90610:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/step-6-5385e1bc0f3af354508a49606f559e14.png"},27347:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/success-ceeaf26dd7fa6967b3baa65b69ecd414.png"}}]);