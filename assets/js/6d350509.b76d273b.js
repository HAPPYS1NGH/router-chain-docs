"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[1793],{89056:e=>{e.exports=JSON.parse('{"pluginId":"omnichain-framework","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/omnichain-framework/","docId":"README"},{"type":"link","label":"Overview","href":"/omnichain-framework/overview","docId":"overview"},{"type":"category","label":"Understanding Omnichain Framework","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Understanding the Functions","href":"/omnichain-framework/understanding-omnichain-framework/understanding-functions","docId":"understanding-omnichain-framework/understanding-functions"},{"type":"link","label":"Functions on third-party chain\'s contract","href":"/omnichain-framework/understanding-omnichain-framework/third-party-chain-contracts","docId":"understanding-omnichain-framework/third-party-chain-contracts"},{"type":"category","label":"Functions on Router chain\'s middleware contract","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SudoMsg","href":"/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/sudomsg","docId":"understanding-omnichain-framework/router-chain-middleware-contract/sudomsg"},{"type":"link","label":"RouterMsg","href":"/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/routermsg","docId":"understanding-omnichain-framework/router-chain-middleware-contract/routermsg"}],"href":"/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/"},{"type":"link","label":"Sample Contracts","href":"/omnichain-framework/understanding-omnichain-framework/sample-contracts","docId":"understanding-omnichain-framework/sample-contracts"}],"href":"/omnichain-framework/understanding-omnichain-framework/"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Your First OmniChain dApp","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"1) Setting up Router\'s EVM Devnet","href":"/omnichain-framework/guides/your-first-omnichain-dapp/setting-up-routers-evm-devnet","docId":"guides/your-first-omnichain-dapp/setting-up-routers-evm-devnet"},{"type":"link","label":"2) Deploying a Sample Application Contract","href":"/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract","docId":"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract"},{"type":"link","label":"3) Deploying a Sample Bridge Contract","href":"/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-bridge-contract","docId":"guides/your-first-omnichain-dapp/deploying-a-sample-bridge-contract"},{"type":"category","label":"4) Testing the End-to-End Workflow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sending an Inbound Request","href":"/omnichain-framework/guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request","docId":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request"},{"type":"link","label":"Verifying the Inbound Request","href":"/omnichain-framework/guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request","docId":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request"},{"type":"link","label":"Verifying the Outbound Request","href":"/omnichain-framework/guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request","docId":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request"},{"type":"link","label":"Verifying the Outbound Ack","href":"/omnichain-framework/guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack","docId":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack"}],"href":"/omnichain-framework/guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/"}],"href":"/omnichain-framework/guides/your-first-omnichain-dapp/"}],"href":"/omnichain-framework/category/guides"},{"type":"category","label":"Texchange","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Architecture","href":"/omnichain-framework/texchange/architecture","docId":"texchange/architecture"},{"type":"link","label":"Contracts","href":"/omnichain-framework/texchange/contracts","docId":"texchange/contracts"}],"href":"/omnichain-framework/texchange/"}]},"docs":{"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract":{"id":"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract","title":"2) Deploying a Sample Application Contract","description":"Part 1: Compiling our Application Contract","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/deploying-a-sample-bridge-contract":{"id":"guides/your-first-omnichain-dapp/deploying-a-sample-bridge-contract","title":"3) Deploying a Sample Bridge Contract","description":"Part 1: Cloning & Compiling our Bridge Contract","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/README":{"id":"guides/your-first-omnichain-dapp/README","title":"Your First OmniChain dApp","description":"In this section, we\'ll provide a step-by-step guide for how users can deploy their first cross-chain dApp that leverages the middleware infra enabled by the Router chain.","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/setting-up-routers-evm-devnet":{"id":"guides/your-first-omnichain-dapp/setting-up-routers-evm-devnet","title":"1) Setting up Router\'s EVM Devnet","description":"To create cross-chain applications using the Router infrastructure, users will have to build and deploy application contracts on various third-party chains. To simulate an EVM environment for smart contract deployment and interaction, we have created Router\'s own EVM-compatible Devnet using Ganache.","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/README":{"id":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/README","title":"4) Testing the End-to-End Workflow","description":"Now that we have deployed all the relevant contracts, it\'s time to test them out.","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request":{"id":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request","title":"Sending an Inbound Request","description":"","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request":{"id":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request","title":"Verifying the Inbound Request","description":"","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack":{"id":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack","title":"Verifying the Outbound Ack","description":"","sidebar":"tutorialSidebar"},"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request":{"id":"guides/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request","title":"Verifying the Outbound Request","description":"","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"Overview","description":"Motivation","sidebar":"tutorialSidebar"},"README":{"id":"README","title":"Introduction","description":"The guides on this page will explain the process of developing cross-chain applications by leveraging Router\'s middleware capabilities. If you\'re new here or you\'re not sure if Router\'s OmniChain framework is compatible with your requirements, check out this guide to figure out the best cross-chain framework for your dApp.","sidebar":"tutorialSidebar"},"texchange/architecture":{"id":"texchange/architecture","title":"Architecture","description":"Functionality","sidebar":"tutorialSidebar"},"texchange/contracts":{"id":"texchange/contracts","title":"Contracts","description":"Testnet Contracts","sidebar":"tutorialSidebar"},"texchange/README":{"id":"texchange/README","title":"TExchange","description":"Background","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/README":{"id":"understanding-omnichain-framework/README","title":"Understanding Omnichain Framework","description":"High Level Architecture","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/router-chain-middleware-contract/README":{"id":"understanding-omnichain-framework/router-chain-middleware-contract/README","title":"Functions on Router chain\'s middleware contract","description":"In the cosmwasm smart contact, router-wasm-bindings needs to be added to support the cross-chain functionality.","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/router-chain-middleware-contract/routermsg":{"id":"understanding-omnichain-framework/router-chain-middleware-contract/routermsg","title":"RouterMsg","description":"The RouterMsg is an enum type inside the router-wasm-bindings. It contains one custom message type.","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/router-chain-middleware-contract/sudomsg":{"id":"understanding-omnichain-framework/router-chain-middleware-contract/sudomsg","title":"SudoMsg","description":"The SudoMsg is an enum and it has two different message types.","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/sample-contracts":{"id":"understanding-omnichain-framework/sample-contracts","title":"Sample Contracts","description":"Some repos have been provided below for reference to ease your development efforts for building an Omnichain dApp.","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/third-party-chain-contracts":{"id":"understanding-omnichain-framework/third-party-chain-contracts","title":"Functions on third-party chain\'s contract","description":"Router\u2019s Gateway contracts have a function named\xa0requestToRouter that facilitates the transmission of a cross-chain request to the middleware contract on the Router Chain. Whenever users want to execute a cross-chain request, they can call this function by passing the payload to be transferred from the source to the Router chain.","sidebar":"tutorialSidebar"},"understanding-omnichain-framework/understanding-functions":{"id":"understanding-omnichain-framework/understanding-functions","title":"Understanding the Functions","description":"As seen in the architecture, the omnichain framework flow is divided into 2 major parts -","sidebar":"tutorialSidebar"}}}')}}]);