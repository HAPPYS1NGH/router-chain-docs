"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[1264],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},39799:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const o={title:"Step 2) Setup a Validator Account",sidebar_position:2},i=void 0,l={unversionedId:"running-a-validator/on-testnet/setup-a-validator-account",id:"running-a-validator/on-testnet/setup-a-validator-account",title:"Step 2) Setup a Validator Account",description:"Before creating a validator account, make sure you are running a Sentry node with the chain synced to the latest block as specified in this step.",source:"@site/docs/validators/running-a-validator/on-testnet/setup-a-validator-account.md",sourceDirName:"running-a-validator/on-testnet",slug:"/running-a-validator/on-testnet/setup-a-validator-account",permalink:"/validators/running-a-validator/on-testnet/setup-a-validator-account",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-testnet/setup-a-validator-account.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Step 2) Setup a Validator Account",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Step 1) Run a Sentry Node",permalink:"/validators/running-a-validator/on-testnet/run-a-sentry-node"},next:{title:"Step 3) Configure and Run an Orchestrator Instance",permalink:"/validators/running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance"}},s={},u=[],c={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Before creating a validator account, make sure you are running a Sentry node with the chain synced to the latest block as specified in this ",(0,r.kt)("a",{parentName:"p",href:"./run-a-sentry-node"},"step"),". "),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2.1) Create a validator account")),(0,r.kt)("p",null,"To setup a validator account, run the following command with your desired validator key name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd keys add my-validator-key --chain-id router_9601-1 --keyring-backend file\n")),(0,r.kt)("p",null,"The aforementioned command will create a new wallet with name ",(0,r.kt)("inlineCode",{parentName:"p"},"my-validator-key")," and will ask you to set a password. "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Remember the password used or store it in a safe place. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# example output\n\n- name: my-validator-key\n  type: local\n  address: router13cyxzsfvmfxsn23spl4nhu0xn307uvj2vju5q0\n  pubkey: \'{"@type":"/routerprotocol.routerchain.crypto.ethsecp256k1.PubKey",\n  mnemonic: ""\n  \n**Important** write this mnemonic phrase in a safe place.\nIt is the only way to recover your account if you ever forget your password.\n\nusual husband better echo deputy same depart river ritual detail reveal window moon few health remember fortune awful custom fossil tired lake jealous sign\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The mnemonic phrase is better backed up on a physical paper, storing it in cloud storage may compromise the validator later.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Remember the address starting from\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"router"),", this is the address of your Router chain validator account."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2.2) Obtain ROUTE tokens")),(0,r.kt)("p",null,"Obtain ROUTE tokens on the Router chain from the ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.testnet.routerchain.dev/"},"testnet faucet"),"."),(0,r.kt)("p",null,"After a few minutes, you can verify the deposit on the ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.testnet.routerprotocol.com"},"explorer UI"),". Alternatively, account balance can be queried using the ",(0,r.kt)("inlineCode",{parentName:"p"},"routerd"),"\xa0CLI with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd query bank balances $(routerd keys show my-validator-key -a --keyring-backend file) --chain-id router_9601-1 --keyring-backend file\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2.3) Set the staking parameters and run your validator account")),(0,r.kt)("p",null,"Now, initialize a new validator with a self-delegation of ROUTE tokens. Most critically, you will need to decide on the values of the validator's staking parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'routerd tx staking create-validator \\\n  --amount=100000000000000000000route \\\n  --pubkey=$(routerd tendermint show-validator) \\\n  --moniker=val-node1 \\\n  --chain-id=router_9601-1 \\\n  --commission-rate="0.10" \\\n  --commission-max-rate="0.20" \\\n  --commission-max-change-rate="0.01" \\\n  --min-self-delegation="1000000" \\\n  --gas="auto" \\\n  --fees="100000000000000route" \\\n  --from=my-validator-key \\\n  --gas-adjustment=1.5 \\\n  --keyring-backend=file\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount")," flag is the initial amount of ROUTE you're willing to bond"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pubkey")," is the validator public key created earlier"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"moniker")," is the human readable name you choose for your validator"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chain-id")," is the network id of the chain you are working with (in the case of Router testnet: ",(0,r.kt)("inlineCode",{parentName:"li"},"router_9601-1"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commission-rate")," is the initial commission rate you will charge your delegates "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commission-max-rate")," is the highest rate you are allowed to charge your delegates"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commission-max-change-rate")," is how much you can increase your commission rate in a 24 hour period"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min-self-delegation")," is the lowest amount of personal funds the validator is required to have in their validator to stay bonded"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"from")," flag is the KEY_NAME you created while initializing the key on your keyring")),(0,r.kt)("p",null,"Verify that the validator was successfully setup by checking the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://hub.testnet.routerchain.dev/staking"},"staking dashboard")," or by entering the CLI command given below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd query staking validator $(routerd keys show my-validator-key -a --keyring-backend file) --chain-id router_9601-1 --keyring-backend file\n")),(0,r.kt)("p",null,"If you see your validator in the list of validators, then congratulations, you have officially joined the Router testnet as a staking validator! \ud83c\udf89")),(0,r.kt)("p",null,"After setting up the validator, immediately proceed to setup the orchestrator. This is a necessary step in order to prevent the validator from being slashed."))}d.isMDXComponent=!0}}]);