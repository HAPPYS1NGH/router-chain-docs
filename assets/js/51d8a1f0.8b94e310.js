"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[9260],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||s;return a?n.createElement(g,i(i({ref:t},l),{},{components:a})):n.createElement(g,i({ref:t},l))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<s;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},20291:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const s={title:"Creating and Sending a Cross-chain Read Request",sidebar_position:1},i=void 0,o={unversionedId:"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request",id:"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request",title:"Creating and Sending a Cross-chain Read Request",description:"To create a cross-chain read request, one needs to call the iSend() function on Router's Gateway contract with the following parameters:",source:"@site/docs/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request.md",sourceDirName:"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests",slug:"/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Creating and Sending a Cross-chain Read Request",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Cross-chain Read Requests",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/"},next:{title:"Handling the Acknowledgment on the Source Chain",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/handling-the-acknowledgment-on-the-source-chain"}},c={},d=[],l={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To create a cross-chain read request, one needs to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"iSend()")," function on Router's Gateway contract with the following parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function iSend(\n    uint256 version,\n    uint256 routeAmount,\n    string calldata routeRecipient,\n    string calldata destChainId,\n    bytes calldata requestMetadata,\n    bytes calldata requestPacket\n ) external payable returns (uint256);\n")),(0,r.kt)("p",null,"Here, the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," is the metadata that includes ",(0,r.kt)("inlineCode",{parentName:"p"},"abi.encodePacked")," value of the destination gas limit, destination gas price, acknowledgment type, acknowledgment gas limit, acknowledgment gas price, relayer fees, read call bool, and the ASM address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function getRequestMetadata(\n    uint64 destGasLimit,\n    uint64 destGasPrice,\n    uint64 ackGasLimit,\n    uint64 ackGasPrice,\n    uint128 relayerFees,\n    uint8 ackType,\n    bool isReadCall,\n    bytes memory asmAddress\n    ) public pure returns (bytes memory) {\n    bytes memory requestMetadata = abi.encodePacked(\n        destGasLimit,\n        destGasPrice,\n        ackGasLimit,\n        ackGasPrice,\n        relayerFees,\n        ackType,\n        isReadCall,\n        asmAddress\n    );\n    return requestMetadata;\n    }\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The detailed documentation for this function can be found ",(0,r.kt)("a",{parentName:"p",href:"../iDapp-functions/iSend#5-requestmetadata"},"here"),".")),(0,r.kt)("p",null,"When creating a read request, the ",(0,r.kt)("inlineCode",{parentName:"p"},"isReadCall")," parameter must be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," parameter. In addition, the payload encoding must be of a specific type."),(0,r.kt)("p",null,"For example, if a user wants to send a read call to a contract A on the destination chain and wants to query the getA() function, the payload on the source chain should be encoded as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"interface A {\n   function getA(uint256 a) external returns (uint256);\n}\n\ncontract Application {\n   function createReadQueryPayload(uint256 a) external returns (bytes memory) {\n      bytes memory payload = abi.encodeCall(A.getA, (a));\n      return payload;\n   }\n}\n")),(0,r.kt)("p",null,"An example for sending a cross-chain read query can be found ",(0,r.kt)("a",{parentName:"p",href:"./sample-read-request-contract"},"here"),"."))}u.isMDXComponent=!0}}]);