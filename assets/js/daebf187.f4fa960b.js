"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[383],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(t),h=r,p=m["".concat(c,".").concat(h)]||m[h]||l[h]||o;return t?a.createElement(p,i(i({ref:n},d),{},{components:t})):a.createElement(p,i({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},94521:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const o={title:"SudoMsg",sidebar_position:1},i=void 0,s={unversionedId:"understanding-omnichain-framework/router-chain-middleware-contract/sudomsg",id:"understanding-omnichain-framework/router-chain-middleware-contract/sudomsg",title:"SudoMsg",description:"The SudoMsg is an enum and it has two different message types.",source:"@site/docs/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/sudomsg.md",sourceDirName:"understanding-omnichain-framework/router-chain-middleware-contract",slug:"/understanding-omnichain-framework/router-chain-middleware-contract/sudomsg",permalink:"/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/sudomsg",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/sudomsg.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"SudoMsg",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Functions on Router chain's middleware contract",permalink:"/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/"},next:{title:"RouterMsg",permalink:"/omnichain-framework/understanding-omnichain-framework/router-chain-middleware-contract/routermsg"}},c={},u=[],d={toc:u};function l(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"SudoMsg")," is an enum and it has two different message types."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HandleIReceive"),(0,r.kt)("li",{parentName:"ul"},"HandleIAck")),(0,r.kt)("p",null,"In the following code snippet, we added the details at the field level of the ",(0,r.kt)("em",{parentName:"p"},"SudoMsg"),". This will helps us in building an understanding of the data that will be coming either in the inbound request or in the outbound acknowledgment request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum SudoMsg {\n    // Sudo msg to handle incoming requests from other chains\n    HandleIReceive {\n        // the inbound initiator application contract address\n        request_sender: String,\n        // inbound request src chain id\n        source_chain_id: String,\n        // inbound request event nonce\n        request_identifier: u64,\n        // the inbound request instructions in base64 format\n        payload: Binary,\n    },\n    // Sudo msg to handle outbound message acknowledgment\n    HandleIAck {\n        // cross-chain request nonce\n        request_identifier: u64,\n        // cross-chain request contract call execution status\n        exec_flag: u64,\n        // cross-chain request contract call execution\n        exec_data: Binary,\n        // excess fee refunded amount\n        refund_amount: Coin,\n    },\n}\n')),(0,r.kt)("p",null,"The sudo function is one of the entry-point in a cosmwasm contract. It can be called internally by the chain only. In Router Chain, the developer needs to implement this sudo function to receive an incoming request. Here, in the following code snippet, we have shown the sample sudo function implementation."),(0,r.kt)("p",null,"Developers can have any sort of business logic inside the ",(0,r.kt)("em",{parentName:"p"},"handle_sudo_request")," and ",(0,r.kt)("em",{parentName:"p"},"handle_sudo_ack")," functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// import router binding message\nuse router_wasm_bindings::{RouterMsg, SudoMsg};\n\n#[cfg_attr(not(feature = "library"), entry_point)]\npub fn sudo(deps: DepsMut, _env: Env, msg: SudoMsg) -> StdResult<Response<RouterMsg>> {\n    match msg {\n        // Sudo msg to handle incoming requests from other chains\n        SudoMsg::HandleIReceive {\n            request_sender,\n            src_chain_id,\n            request_identifier,\n            payload,\n        } => handle_sudo_request(\n            deps,\n            env,\n            request_sender,\n            src_chain_id,\n            request_identifier,\n            payload,\n        ),\n        // Sudo msg to handle outbound message acknowledgment\n        SudoMsg::HandleIAck {\n            request_identifier,\n            exec_flag,\n            exec_data,\n            refund_amount,\n        } => handle_sudo_ack(\n            deps,\n            env,\n            request_identifier,\n            exec_flag,\n            exec_data,\n            refund_amount,\n        ),\n    }\n}\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"HandleIReceive")),(0,r.kt)("p",null,"The sudo message ",(0,r.kt)("inlineCode",{parentName:"p"},"HandleIReceive")," contains 4 arguments. This sudo function gets called when an inbound request comes for your middleware contract. We can handle this sudo request in any possible way or even skip it. As you can see in the code snippet, a function ",(0,r.kt)("inlineCode",{parentName:"p"},"handle_sudo_request")," has been created to handle the incoming inbound request in the cosmwasm contact. Within this function, you can apply any logic to the payload from the incoming request before creating the request for the destination chain. Each field has its own purpose and meaning in the ",(0,r.kt)("inlineCode",{parentName:"p"},"HandleIReceive")," request."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"request_sender:")," The application contract address on the source chain from which the request to the Router chain was sent."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"source_chain_id:")," The chain ID of the chain from which the inbound request to the Router chain has been initiated."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"request_identifier:")," The request identifier is a unique identifier of the request that is added by the source chain's gateway contract."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"payload:")," The payload comes from the source chain contract."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"HandleIAck")),(0,r.kt)("p",null,"The sudo message ",(0,r.kt)("inlineCode",{parentName:"p"},"HandleIAck")," has 4 arguments. This sudo function gets called when the acknowledgment is received by the middleware contract on the Router chain post-execution of the contract call on the destination chain. We can handle this sudo request in any possible way or even skip it. As you can see in the code snippet, the function ",(0,r.kt)("inlineCode",{parentName:"p"},"handle_sudo_ack")," has been created to handle the incoming acknowledgment request in the cosmwasm contact. Each field has its own purpose and meaning in the ",(0,r.kt)("inlineCode",{parentName:"p"},"HandleIAck")," request."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"request_identifier:")," The unique and incremented integer value for the outbound request."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"exec_flag:")," The execution status flag for the contract call which was made on the destination chain."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"exec_data:")," The execution data for all the requests executed on the destination chain."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"refund_amount:")," The refunded fee amount is the extra fee that we have passed for the destination side contract execution."))))}l.isMDXComponent=!0}}]);