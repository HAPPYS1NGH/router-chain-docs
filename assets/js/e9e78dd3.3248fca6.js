"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[2018],{6544:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var o=n(87462),r=(n(67294),n(3905)),a=n(69568);const l={title:"Supported Chains",sidebar_position:2},i=void 0,s={unversionedId:"supported-chains",id:"supported-chains",title:"Supported Chains",description:"The chain config for all the networks supported by Router including the gateway contract addresses can be found at the following links:",source:"@site/docs/networks/supported-chains.mdx",sourceDirName:".",slug:"/supported-chains",permalink:"/networks/supported-chains",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/networks/supported-chains.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Supported Chains",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Public Endpoints",permalink:"/networks/"},next:{title:"Tools",permalink:"/networks/tools"}},c={},d=[{value:"For Testnet",id:"for-testnet",level:3},{value:"For Devnet",id:"for-devnet",level:3}],p={toc:d};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The chain config for all the networks supported by Router including the gateway contract addresses can be found at the following links:"),(0,r.kt)("h3",{id:"for-testnet"},"For Testnet"),(0,r.kt)(a.Z,{apiData:[{apiUrl:"https://lcd.testnet.routerchain.dev/router-protocol/router-chain/multichain/chain_config",networkType:"Testnet"}],mdxType:"APIData"}),(0,r.kt)("div",{style:{marginBottom:"50px"}}),(0,r.kt)("h3",{id:"for-devnet"},"For Devnet"),(0,r.kt)(a.Z,{apiData:[{apiUrl:"https://devnet.lcd.routerprotocol.com/router-protocol/router-chain/multichain/chain_config",networkType:"Devnet"}],mdxType:"APIData"}),(0,r.kt)("div",{style:{marginBottom:"50px"}}))}u.isMDXComponent=!0},69568:(t,e,n)=>{n.d(e,{Z:()=>l});var o=n(67294),r=n(9669),a=n.n(r);const l=t=>{let{apiData:e}=t;const[n,r]=(0,o.useState)([]);(0,o.useEffect)((()=>{l()}),[]);const l=async()=>{try{const t=e.map((t=>{let{apiUrl:e}=t;return a().get(e)})),n=await Promise.all(t),o=[];n.forEach(((t,n)=>{const{networkType:r}=e[n],a=t.data.chainConfig.map((t=>({...t,networkType:r})));o.push(...a)})),r(o)}catch(t){console.log(t)}};return o.createElement("div",null,o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",{style:{fontWeight:"bold"}},"Network Type"),o.createElement("th",{style:{fontWeight:"bold"}},"Chain ID"),o.createElement("th",{style:{fontWeight:"bold"}},"Chain Name"),o.createElement("th",{style:{fontWeight:"bold"}},"Gateway Contract Address"))),o.createElement("tbody",null,n.map((t=>o.createElement("tr",{key:t.chainId},o.createElement("td",null,t.networkType),o.createElement("td",null,t.chainId),o.createElement("td",null,t.chainName),o.createElement("td",null,t.gatewayContractAddress)))))))}}}]);