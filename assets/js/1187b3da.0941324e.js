"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[7233],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},68459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"Integrate ASM into Your Application",sidebar_position:2},s=void 0,o={unversionedId:"message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application",id:"message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application",title:"Integrate ASM into Your Application",description:"After building your ASM, you can deploy it on the desired chain. To send a request from the source chain to the destination chain, the user needs to call the following function signature.",source:"@site/docs/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application.md",sourceDirName:"message-transfer-via-crosstalk/evm-guides/asm-implementation",slug:"/message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Integrate ASM into Your Application",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"ASM Implementation",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/"},next:{title:"Sample Delayed Execution ASM Contract",permalink:"/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/sample-delayed-execution-asm-contract"}},c={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"After building your ASM, you can deploy it on the desired chain. To send a request from the source chain to the destination chain, the user needs to call the following function signature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function iSend(\n    uint256 version,\n    uint256 routeAmount,\n    string calldata routeRecipient,\n    string calldata destChainId,\n    bytes calldata requestMetadata,\n    bytes calldata requestPacket\n) external payable returns (uint256);\n")),(0,r.kt)("p",null,"In the above-mentioned code snippet, a ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," parameter needs to be constructed, which is an ABI-encoded parameter that can be generated on-chain or passed via arguments in a function call. Checkout this ",(0,r.kt)("a",{parentName:"p",href:"../iDapp-functions/iSend#5-requestmetadata"},"section")," to know more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," function."),(0,r.kt)("p",null,"The last argument in the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," parameter is ",(0,r.kt)("inlineCode",{parentName:"p"},"asmAddress")," in string format. As the name suggests, this address points to the ASM contract on the destination chain. The ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," parameter can be created on-chain using the following function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function getRequestMetadata(\n    uint64 destGasLimit,\n    uint64 destGasPrice,\n    uint64 ackGasLimit,\n    uint64 ackGasPrice,\n    uint128 relayerFees,\n    uint8 ackType,\n    bool isReadCall,\n    string asmAddress\n) external view returns (bytes memory) {\n    return\n        abi.encodePacked(\n            destGasLimit,\n            destGasPrice,\n            ackGasLimit,\n            ackGasPrice,\n            relayerFees,\n            ackType,\n            isReadCall,\n            asmAddress\n        );\n}\n")),(0,r.kt)("p",null,"Alternatively, the ",(0,r.kt)("inlineCode",{parentName:"p"},"requestMetadata")," parameter can be created in TypeScript or JavaScript using the following function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function getRequestMetadata(\n  destGasLimit: number,\n  destGasPrice: number,\n  ackGasLimit: number,\n  ackGasPrice: number,\n  relayerFees: string,\n  ackType: number,\n  isReadCall: boolean,\n  asmAddress: string\n): string {\n  return ethers.utils.solidityPack(\n    [\n      'uint64',\n      'uint64',\n      'uint64',\n      'uint64',\n      'uint128',\n      'uint8',\n      'bool',\n      'string',\n    ],\n    [\n      destGasLimit,\n      destGasPrice,\n      ackGasLimit,\n      ackGasPrice,\n      relayerFees,\n      ackType,\n      isReadCall,\n      asmAddress,\n    ]\n  );\n}\n")))}p.isMDXComponent=!0}}]);