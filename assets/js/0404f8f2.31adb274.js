"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[8054],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},28010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={title:"Step 1) Run a Sentry Node",sidebar_position:1},i=void 0,l={unversionedId:"running-a-validator/on-devnet/run-a-sentry-node",id:"running-a-validator/on-devnet/run-a-sentry-node",title:"Step 1) Run a Sentry Node",description:"Step 1.1) Clone routerd binary",source:"@site/docs/validators/running-a-validator/on-devnet/run-a-sentry-node.md",sourceDirName:"running-a-validator/on-devnet",slug:"/running-a-validator/on-devnet/run-a-sentry-node",permalink:"/validators/running-a-validator/on-devnet/run-a-sentry-node",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-devnet/run-a-sentry-node.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Step 1) Run a Sentry Node",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"On Devnet",permalink:"/validators/running-a-validator/on-devnet/"},next:{title:"Step 2) Setup a Validator Account",permalink:"/validators/running-a-validator/on-devnet/setup-a-validator-account"}},s={},u=[],c={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 1.1) Clone routerd binary")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/router-protocol/router-chain-releases\nunzip linux-amd64.zip\nsudo mv routerd /usr/bin\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 1.2) Initialize the chain config")),(0,o.kt)("p",null,"Before running the RouterChain node, it is very important to initialize the chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# the argument <moniker> is the custom username of your node, it should be human-readable.\nexport MONIKER=<moniker>\n# the Router devnet has a chain-id of "router_9603-1"\nrouterd init $MONIKER --chain-id router_9603-1\n')),(0,o.kt)("p",null,"Running the aforementioned commands will create\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"routerd"),"\xa0default configuration files at\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"~/.routerd"),".")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 1.3) Prepare configuration to join the devnet")),(0,o.kt)("p",null,"Validators need to update the default configuration using devnet's genesis file and application config file, as well as configure their persistent peers with a seed node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/router-protocol/network-config\n\n# copy genesis file to config directory\ncp network-config/devnet/10001/genesis.json ~/.routerd/config/\n\n# copy config file to config directory\ncp network-config/devnet/10001/app.toml  ~/.routerd/config/app.toml\ncp network-config/devnet/10001/config.toml ~/.routerd/config/config.toml\n")),(0,o.kt)("p",null,"Validators can also verify the checksum of the genesis file - ",(0,o.kt)("inlineCode",{parentName:"p"},"6df41f6f7ea0a3cfaee966b2e25b3a2585545cb676f633eda3b8ea1bedece902")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sha256sum ~/.routerd/config/genesis.json\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 1.4) Configure systemd service for routerd")),(0,o.kt)("p",null,"Edit the config at ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/routerd.service")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[Unit]\nDescription=routerd\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=ubuntu\nType=simple\nExecStart=/usr/bin/routerd --log-level=debug start\n\n[Install]\n")),(0,o.kt)("p",null,"After making these edits, restart the systemd service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# restarting the systemd service\nsudo systemctl daemon-reload\nsudo systemctl restart routerd\nsudo systemctl status routerd\n\n# enable start on system boot\nsudo systemctl enable routerd\n\n# to check Logs\njournalctl -u routerd -f\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 1.5) Start the chain")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl stop routerd\nsudo systemctl start routerd\n")),(0,o.kt)("p",null,"After executing these commands, syncing will begin.")))}d.isMDXComponent=!0}}]);