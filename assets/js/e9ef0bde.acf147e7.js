"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[4730],{3905:(t,e,o)=>{o.d(e,{Zo:()=>u,kt:()=>d});var a=o(67294);function r(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function n(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,a)}return o}function l(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?n(Object(o),!0).forEach((function(e){r(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function s(t,e){if(null==t)return{};var o,a,r=function(t,e){if(null==t)return{};var o,a,r={},n=Object.keys(t);for(a=0;a<n.length;a++)o=n[a],e.indexOf(o)>=0||(r[o]=t[o]);return r}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(a=0;a<n.length;a++)o=n[a],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(t,o)&&(r[o]=t[o])}return r}var c=a.createContext({}),i=function(t){var e=a.useContext(c),o=e;return t&&(o="function"==typeof t?t(e):l(l({},e),t)),o},u=function(t){var e=i(t.components);return a.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var o=t.components,r=t.mdxType,n=t.originalType,c=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),m=i(o),d=r,k=m["".concat(c,".").concat(d)]||m[d]||p[d]||n;return o?a.createElement(k,l(l({ref:e},u),{},{components:o})):a.createElement(k,l({ref:e},u))}));function d(t,e){var o=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var n=o.length,l=new Array(n);l[0]=m;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,l[1]=s;for(var i=2;i<n;i++)l[i]=o[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,o)}m.displayName="MDXCreateElement"},68807:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>n,metadata:()=>s,toc:()=>i});var a=o(87462),r=(o(67294),o(3905));const n={title:"Cosmwasm & localrouter",sidebar_position:3},l="CosmWasm & localrouter",s={unversionedId:"local/localosmosis",id:"local/localosmosis",title:"Cosmwasm & localrouter",description:"You can now deploy contracts to localrouter with Beaker. The official tooling to deploy Osmosis Smartcontracts.",source:"@site/docs/cosmwasm/local/localosmosis.md",sourceDirName:"local",slug:"/local/localosmosis",permalink:"/cosmwasm/local/localosmosis",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/cosmwasm/local/localosmosis.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Cosmwasm & localrouter",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Cosmwasm",permalink:"/cosmwasm/"},next:{title:"Submit a Cosmwasm Governance Proposal",permalink:"/cosmwasm/local/submit-wasm-proposal"}},c={},i=[{value:"Initial Setup: Rust, Contract Environment, Beaker, and Osmosis",id:"initial-setup-rust-contract-environment-beaker-and-osmosis",level:2},{value:"Option 1: Automatic Setup",id:"option-1-automatic-setup",level:3},{value:"Option 2: Manual Setup",id:"option-2-manual-setup",level:3},{value:"Rust",id:"rust",level:4},{value:"Contact Environment",id:"contact-environment",level:4},{value:"Beaker",id:"beaker",level:4},{value:"Osmosis",id:"osmosis",level:4},{value:"Start localrouter",id:"start-localrouter",level:2},{value:"Deploy a smart contract",id:"deploy-a-smart-contract",level:2},{value:"Clone cw-tpl-osmosis",id:"clone-cw-tpl-osmosis",level:3},{value:"Compile the wasm contract with stable toolchain",id:"compile-the-wasm-contract-with-stable-toolchain",level:3},{value:"Optimized Compilation",id:"optimized-compilation",level:3},{value:"Created a local key",id:"created-a-local-key",level:3},{value:"Store to your localrouter chain",id:"store-to-your-localrouter-chain",level:3},{value:"Or Store CODE_ID",id:"or-store-code_id",level:3},{value:"Instantiate the contract",id:"instantiate-the-contract",level:3},{value:"Get contract address",id:"get-contract-address",level:3},{value:"Query Contract",id:"query-contract",level:2},{value:"Increment contract&#39;s count",id:"increment-contracts-count",level:3},{value:"Reset contracts count",id:"reset-contracts-count",level:3},{value:"Get contract&#39;s state",id:"get-contracts-state",level:3},{value:"Query contract info",id:"query-contract-info",level:3},{value:"List all contracts",id:"list-all-contracts",level:3}],u={toc:i};function p(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cosmwasm--localrouter"},"CosmWasm & localrouter"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can now deploy contracts to localrouter with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/router-protocol/beaker"},"Beaker"),". The official tooling to deploy Osmosis Smartcontracts.")),(0,r.kt)("p",null,"The following is detailed guide that shows the basics of manually deploying a contract to a Osmosis local environment. It covers: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initial Setup",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Rust"),(0,r.kt)("li",{parentName:"ul"},"localrouter via Osmosis installer. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"routerd binary automatically configured to connect to your localrouter"),(0,r.kt)("li",{parentName:"ul"},"localrouter setup in the $HOME directory (~/localrouter)"))))),(0,r.kt)("li",{parentName:"ul"},"Deploy a smart contract",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Clone a base template contract"),(0,r.kt)("li",{parentName:"ul"},"Compile contract"),(0,r.kt)("li",{parentName:"ul"},"Optimize  contract"),(0,r.kt)("li",{parentName:"ul"},"Create local key"),(0,r.kt)("li",{parentName:"ul"},"Store contract"),(0,r.kt)("li",{parentName:"ul"},"Initialize"),(0,r.kt)("li",{parentName:"ul"},"Get contract address"),(0,r.kt)("li",{parentName:"ul"},"Query contract"),(0,r.kt)("li",{parentName:"ul"},"Increment contract's count"),(0,r.kt)("li",{parentName:"ul"},"Reset contracts count"),(0,r.kt)("li",{parentName:"ul"},"Get contract's state"),(0,r.kt)("li",{parentName:"ul"},"Query contract info"),(0,r.kt)("li",{parentName:"ul"},"List all contracts")))),(0,r.kt)("h2",{id:"initial-setup-rust-contract-environment-beaker-and-osmosis"},"Initial Setup: Rust, Contract Environment, Beaker, and Osmosis"),(0,r.kt)("p",null,"Before beginning, you must set up Rust, your contract environment, Beaker, and Osmosis with one of the two following options:"),(0,r.kt)("h3",{id:"option-1-automatic-setup"},"Option 1: Automatic Setup"),(0,r.kt)("p",null,"Start the installer with the following command, choose localrouter (option 3), and follow the prompts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bash <(curl -sL https://get.osmosis.zone/run)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{src:o(66042).Z,width:"1586",height:"996"})),(0,r.kt)("h3",{id:"option-2-manual-setup"},"Option 2: Manual Setup"),(0,r.kt)("h4",{id:"rust"},"Rust"),(0,r.kt)("p",null,"Install Rust using rustup with the following command and follow the prompts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n")),(0,r.kt)("h4",{id:"contact-environment"},"Contact Environment"),(0,r.kt)("p",null,"Set 'stable' as the default release channel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rustup default stable\n")),(0,r.kt)("p",null,"Add WASM as the compilation target:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rustup target add wasm32-unknown-unknown\n")),(0,r.kt)("p",null,"Install the following packages to generate the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo install cargo-generate --features vendored-openssl\ncargo install cargo-run-scrip\n")),(0,r.kt)("h4",{id:"beaker"},"Beaker"),(0,r.kt)("p",null,"Install Beaker with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo install -f beaker\n")),(0,r.kt)("h4",{id:"osmosis"},"Osmosis"),(0,r.kt)("p",null,"Setup v12.x Osmosis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd $HOME\ngit clone https://github.com/router-protocol/osmosis.git\ncd $HOME/osmosis\ngit checkout v12.x\nmake install\nsource ~/.profile\n")),(0,r.kt)("h2",{id:"start-localrouter"},"Start localrouter"),(0,r.kt)("p",null,"Inside a separate bash window start localrouter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/osmosis\nmake localnet-start\n")),(0,r.kt)("p",null,"You will start seeing localrouter block activity in your terminal. Keep localrouter running while you perform the next steps in a new terminal window."),(0,r.kt)("p",null,(0,r.kt)("img",{src:o(9822).Z,width:"837",height:"542"})),(0,r.kt)("p",null,"In place of doing the above commands, you can instead start localrouter with pre-made pools by starting localrouter with the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/osmosis\nmake localnet-start-with-state\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To view the localrouter wallet information, visit the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/router-protocol/localrouter#accounts"},"localrouter accounts page"),". ")),(0,r.kt)("h2",{id:"deploy-a-smart-contract"},"Deploy a smart contract"),(0,r.kt)("h3",{id:"clone-cw-tpl-osmosis"},"Clone cw-tpl-osmosis"),(0,r.kt)("p",null,"For this example we will use the cw-tpl-osmosis (CosmWasm Template Osmosis) repo that was created with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/InterWasm/cw-template"},"cw-template")," repo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/router-protocol/cw-tpl-osmosis\n")),(0,r.kt)("h3",{id:"compile-the-wasm-contract-with-stable-toolchain"},"Compile the wasm contract with stable toolchain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rustup default stable\ncargo wasm\n")),(0,r.kt)("p",null,"After this compiles, it should produce a file in ",(0,r.kt)("inlineCode",{parentName:"p"},"target/wasm32-unknown-unknown/release/cw_tpl_osmosis.wasm.")," A quick ls -lh should show around 1.8MB. This is a release build, but not stripped of all unneeded code. To produce a much smaller version, you can run this which tells the compiler to strip all unused code out:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"RUSTFLAGS='-C link-arg=-s' \ncargo wasm \n\n")),(0,r.kt)("p",null,"This produces a file about 149kB. We will do further optimisation below."),(0,r.kt)("h3",{id:"optimized-compilation"},"Optimized Compilation"),(0,r.kt)("p",null,"To reduce gas costs, the binary size should be as small as possible. This will result in a less costly deployment, and lower fees on every interaction. Luckily, there is tooling to help with this. You can optimize production code using rust-optimizer. rust-optimizer produces reproducible builds of CosmWasm smart contracts. This means third parties can verify the contract is actually the claimed code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'sudo docker run --rm -v "$(pwd)":/code \\\n    --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \\\n    --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\n    cosmwasm/rust-optimizer:0.12.6\n \n')),(0,r.kt)("p",null,"Binary will be at artifacts/osmosis_cw_tpl.wasm folder and its size will be 138k"),(0,r.kt)("h3",{id:"created-a-local-key"},"Created a local key"),(0,r.kt)("p",null,"Create a key using one of the seeds provided in localrouter. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"routerd keys add <unsafe-test-key-name> --recover\n")),(0,r.kt)("p",null,"Example test1 key from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/router-protocol/osmosis/tree/main/tests/localrouter#localrouter-accounts"},"here"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"notice oak worry limit wrap speak medal online prefer cluster roof addict wrist behave treat actual wasp year salad speed social layer crew genius\n")),(0,r.kt)("h3",{id:"store-to-your-localrouter-chain"},"Store to your localrouter chain"),(0,r.kt)("p",null,"You can deploy the contract to localrouter or a testnet.  In this example we will deploy to localrouter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd artifacts\nrouterd tx wasm store cw_tpl_osmosis.wasm  --from <unsafe-test-key-name> --chain-id=<chain-id> --gas-prices 0.1uosmo --gas auto --gas-adjustment 1.3 -b block -y\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<unsafe-test-key-name>")," = Name of your local key.\n",(0,r.kt)("inlineCode",{parentName:"p"},"<chain-id>")," = localrouter"),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<unsafe-test-key-name>")," with the key name from your local keys. ",(0,r.kt)("inlineCode",{parentName:"p"},"routerd keys list"),"\nReplace ",(0,r.kt)("inlineCode",{parentName:"p"},"<chain-id>")," with localrouter or osmo-test-4.\nSave the CODE_ID from the output of the command above as a local variable ",(0,r.kt)("inlineCode",{parentName:"p"},"CODE_ID=XX")),(0,r.kt)("h3",{id:"or-store-code_id"},"Or Store CODE_ID"),(0,r.kt)("p",null,"Instead of looking for the code_id the command above, you can also run the following command to set the CODE_ID as a variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"TX=$(routerd tx wasm store cw_tpl_osmosis.wasm  --from <unsafe-test-key-name> --chain-id=<chain-id> --gas-prices 0.1uosmo --gas auto --gas-adjustment 1.3 -b block --output json -y | jq -r '.txhash')\nCODE_ID=$(routerd query tx $TX --output json | jq -r '.logs[0].events[-1].attributes[0].value')\necho \"Your contract code_id is $CODE_ID\"\n")),(0,r.kt)("p",null,"If this is a brand new localrouter instance it should be ",(0,r.kt)("inlineCode",{parentName:"p"},"1")),(0,r.kt)("h3",{id:"instantiate-the-contract"},"Instantiate the contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'INITIAL_STATE=\'{"count":100}\'\nrouterd tx wasm instantiate $CODE_ID $INITIAL_STATE --amount 50000uosmo  --label "Counter Contract" --from <unsafe-test-key-name> --chain-id <chain-id> --gas-prices 0.1uosmo --gas auto --gas-adjustment 1.3 -b block -y --no-admin\n')),(0,r.kt)("p",null,"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'INITIAL_STATE=\'{"count":100}\'\nrouterd tx wasm instantiate $CODE_ID $INITIAL_STATE --amount 50000uosmo  --label "Counter Contract" --from c1 --chain-id localrouter --gas-prices 0.1uosmo --gas auto --gas-adjustment 1.3 -b block -y --no-admin\n')),(0,r.kt)("h3",{id:"get-contract-address"},"Get contract address"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CONTRACT_ADDR=$(routerd query wasm list-contract-by-code $CODE_ID --output json | jq -r '.contracts[0]')\n")),(0,r.kt)("h2",{id:"query-contract"},"Query Contract"),(0,r.kt)("h3",{id:"increment-contracts-count"},"Increment contract's count"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'INCREMENT_MSG=\'{"increment":{}}\'\nrouterd tx wasm execute $CONTRACT_ADDR "$INCREMENT_MSG" --from c1\n')),(0,r.kt)("h3",{id:"reset-contracts-count"},"Reset contracts count"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'RESET_MSG=\'{"reset":{"count":0}}\'\nrouterd tx wasm execute $CONTRACT_ADDR "$RESET_MSG" --from c1\n')),(0,r.kt)("h3",{id:"get-contracts-state"},"Get contract's state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET_STATE_MSG=\'{"get_count":{}}\'\nrouterd query wasm contract-state smart  $CONTRACT_ADDR "$GET_STATE_MSG"\n')),(0,r.kt)("h3",{id:"query-contract-info"},"Query contract info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"routerd query wasm contract $CONTRACT_ADDR\n")),(0,r.kt)("h3",{id:"list-all-contracts"},"List all contracts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"routerd query wasm list-code\n")),(0,r.kt)("p",null,"Good job! It's now time to learn how to actually develop contracts. You can now visit the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.cosmwasm.com/docs/1.0/getting-started/intro"},"official CosmWasm contracts")," and as you explore the docs you will understand how tio actually interact with the Osmosis Blockchain."))}p.isMDXComponent=!0},66042:(t,e,o)=>{o.d(e,{Z:()=>a});const a=o.p+"assets/images/local-installer-81833fc47f4c02b154759d4ec12f4265.png"},9822:(t,e,o)=>{o.d(e,{Z:()=>a});const a=o.p+"assets/images/localOsmosis-a40e40f39bce9e6a0df0fc5bc5b9f81e.png"}}]);