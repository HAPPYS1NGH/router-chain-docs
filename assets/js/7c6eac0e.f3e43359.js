"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[6023],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||h[d]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},32051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"High Level Architecture",sidebar_position:1,description:"Understanding CrossTalk's architecture"},i=void 0,c={unversionedId:"message-transfer-via-crosstalk/key-concepts/high-level-architecture",id:"message-transfer-via-crosstalk/key-concepts/high-level-architecture",title:"High Level Architecture",description:"Understanding CrossTalk's architecture",source:"@site/docs/develop/message-transfer-via-crosstalk/key-concepts/high-level-architecture.md",sourceDirName:"message-transfer-via-crosstalk/key-concepts",slug:"/message-transfer-via-crosstalk/key-concepts/high-level-architecture",permalink:"/develop/message-transfer-via-crosstalk/key-concepts/high-level-architecture",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/key-concepts/high-level-architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"High Level Architecture",sidebar_position:1,description:"Understanding CrossTalk's architecture"},sidebar:"tutorialSidebar",previous:{title:"Key Concepts",permalink:"/develop/message-transfer-via-crosstalk/key-concepts/"},next:{title:"Fee Management",permalink:"/develop/message-transfer-via-crosstalk/key-concepts/fee-management"}},s={},p=[],l={toc:p};function h(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("center",null,(0,a.kt)("figure",null,(0,a.kt)("img",{src:n(22849).Z,alt:"Router CrossTalk Architecture",style:{width:"100%",marginBottom:12}}),(0,a.kt)("figcaption",null,"High-level architecture diagram for Router CrossTalk"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," Once a user initiates a cross-chain action on an application on the source chain, the application smart contract calls a specific function on the Router Gateway contract (",(0,a.kt)("inlineCode",{parentName:"p"},"iSend")," in case of EVM chains, ",(0,a.kt)("inlineCode",{parentName:"p"},"i_send")," in case of NEAR)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," The Gateway contract on the source chain emits an event that is listened to by the orchestrators on the Router chain."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3)")," Once the event is validated, the Router chain will deduct the fee from the designated ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer")," address for that dApp on the Router chain. The ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer")," address can be set by the dApp while linking it with CrossTalk. A dApp's ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer")," is responsible for paying the fees for all the cross-chain requests generated by that dApp."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4)")," Relayers pick up the transaction signed by the orchestrator and forward the message to the destination chain's Router Gateway contract."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 5)")," The Gateway contract on the destination chain calls a specific function on the application contract (",(0,a.kt)("inlineCode",{parentName:"p"},"iReceive")," in case of EVM chains, ",(0,a.kt)("inlineCode",{parentName:"p"},"i_receive")," in case of NEAR)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 6)")," Based on the data transferred, the application contract on the destination chain will execute the relevant actions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 7)")," After the function execution is complete on the destination chain, the destination chain\u2019s Gateway contract emits an acknowledgment event that is listened to by the orchestrators on the Router chain."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 8)")," Once the ack event is validated, it is processed on the Router chain, i.e., the cross-chain request corresponding to the ack is marked as completed and excess fee is paid back to the ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 9)")," If the dApp opted to receive the ack back on the source chain, it is sent to the source chain's Gateway contract by the relayers. If not, it is discarded. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 10)")," The Gateway contract on the source chain sends the ack to the application's source chain contract."))}h.isMDXComponent=!0},22849:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/new-high-level-workflow-62293f72aac999e958af622280b3e15c.png"}}]);