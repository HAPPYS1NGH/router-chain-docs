"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[6190],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6864:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={title:"Sentry Node on Devnet",sidebar_position:1},i=void 0,l={unversionedId:"running-a-validator/on-devnet/sentry-node-devnet",id:"running-a-validator/on-devnet/sentry-node-devnet",title:"Sentry Node on Devnet",description:"Hardware Specification",source:"@site/docs/validators/running-a-validator/on-devnet/sentry-node-devnet.md",sourceDirName:"running-a-validator/on-devnet",slug:"/running-a-validator/on-devnet/sentry-node-devnet",permalink:"/validators/running-a-validator/on-devnet/sentry-node-devnet",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-devnet/sentry-node-devnet.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Sentry Node on Devnet",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"On Devnet",permalink:"/validators/running-a-validator/on-devnet/"},next:{title:"Becoming a Validator",permalink:"/validators/running-a-validator/on-devnet/becoming-validator"}},s={},u=[{value:"Hardware Specification",id:"hardware-specification",level:2},{value:"Steps to run sentry node",id:"steps-to-run-sentry-node",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"hardware-specification"},"Hardware Specification"),(0,o.kt)("p",null,"Validators should expect to provision one or more data center locations with redundant power, networking, firewalls, HSMs and servers."),(0,o.kt)("p",null,"The initial miniumum recommended hardware specifications is provided below which might rise as network usage increases."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"4+ vCPU x64 2.0+ GHz\n32+ GB RAM\n1TB+ SSD\n")),(0,o.kt)("h2",{id:"steps-to-run-sentry-node"},"Steps to run sentry node"),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 1) Clone routerd binary")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"wget https://github.com/router-protocol/router-chain-releases\nunzip linux-amd64.zip\nsudo mv routerd /usr/bin\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 2) Initialize the chain config")),(0,o.kt)("p",null,"Before actually running the RouterChain node, chain needs to be initialized, and most importantly its genesis file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'# The argument <moniker> is the custom username of your node, it should be human-readable.\nexport MONIKER=<moniker>\n# the Router Chain has a chain-id of "router-1"\nrouterd init $MONIKER --chain-id router-1\n')),(0,o.kt)("p",null,"Running this command will create\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"routerd"),"\xa0default configuration files at\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"~/.routerd"),".")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 3) Prepare configuration to join devnet")),(0,o.kt)("p",null,"Validators need to update the default configuration with the Devnet's genesis file and application config file, as well as configure their persistent peers with a seed node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"git clone https://github.com/router-protocol/network-config\n\n# copy genesis file to config directory\ncp network-config/devnet/10001/genesis.json ~/.routerd/config/\n\n# copy config file to config directory\ncp network-config/devnet/10001/app.toml  ~/.routerd/config/app.toml\ncp network-config/devnet/10001/config.toml ~/.routerd/config/config.toml\n")),(0,o.kt)("p",null,"Validators can also verify the checksum of the genesis checksum - ",(0,o.kt)("inlineCode",{parentName:"p"},"6df41f6f7ea0a3cfaee966b2e25b3a2585545cb676f633eda3b8ea1bedece902")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"sha256sum ~/.routerd/config/genesis.json\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 4) Configure systemd service for routerd")),(0,o.kt)("p",null,"Edit the config at ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/routerd.service")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"[Unit]\nDescription=routerd\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=ubuntu\nType=simple\nExecStart=/usr/bin/routerd --log-level=debug start\n\n[Install]\n")),(0,o.kt)("p",null,"Starting and restarting the systemd service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"Starting and restarting the systemd service\n\nsudo systemctl daemon-reload\nsudo systemctl restart routerd\nsudo systemctl status routerd\n\n# enable start on system boot\nsudo systemctl enable routerd\n\n# To check Logs\njournalctl -u routerd -f\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Step 5) Start the chain")),(0,o.kt)("p",null,"The chain can now be started and syncing will begin."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"sudo systemctl stop routerd\nsudo systemctl start routerd\n"))))}c.isMDXComponent=!0}}]);