"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[9656],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},53829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"Step 3) Configure and Run an Orchestrator Instance",sidebar_position:3},i=void 0,l={unversionedId:"running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance",id:"running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance",title:"Step 3) Configure and Run an Orchestrator Instance",description:"If you have followed the preceeding steps properly, you should already see an orchestrator config created at ~/.router-orchestrator/config.json. Now, let's configure and run an orchestrator instance.",source:"@site/docs/validators/running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance.md",sourceDirName:"running-a-validator/on-testnet",slug:"/running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance",permalink:"/validators/running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-testnet/configure-and-run-an-orchestrator-instance.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Step 3) Configure and Run an Orchestrator Instance",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Step 2) Setup a Validator Account",permalink:"/validators/running-a-validator/on-testnet/setup-a-validator-account"},next:{title:"On Devnet",permalink:"/validators/running-a-validator/on-devnet/"}},s={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you have followed the preceeding steps properly, you should already see an orchestrator config created at ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.router-orchestrator/config.json"),". Now, let's configure and run an orchestrator instance."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 3.1) Create a new wallet for the orchestrator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd keys add my-orchestrator-key --chain-id router_9601-1 --keyring-backend file\n")),(0,r.kt)("p",null,"The aforementioned command will create a new wallet with name ",(0,r.kt)("inlineCode",{parentName:"p"},"my-orchestrator-key")," and will ask you to set a password. "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Remember the password used or store it in a safe place. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# example output\n\n- name: my-orchestrator-key\n  type: local\n  address: router13cffzsfgjklfq17poq2ifm0xn426ing3bqk5q1\n  pubkey: \'{"@type":"/routerprotocol.routerchain.crypto.ethsecp256k1.PubKey",\n  mnemonic: ""\n  \n**Important** write this mnemonic phrase in a safe place.\nIt is the only way to recover your account if you ever forget your password.\n\nchocolate wife later depart same window health ocean happy dog formula pen sun retail tank ship board awesome couch laptop city bottle curtain bowl\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The mnemonic phrase is better backed up on a physical paper, storing it in cloud storage may compromise the validator later.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Remember the address starting from\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"router"),", this is the address of your Router chain orchestrator account."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 3.2) Obtain ROUTE token")),(0,r.kt)("p",null,"Now, add funds to your orchestrator wallet as it will be used to pay for the gas fees:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd tx bank send <validator-node-key-name> $(routerd keys show my-orchestrator-key -a --keyring-backend file) 1000000000000000000route --from my-validator-key --chain-id router_9601-1 --fees 1000000000000000route --keyring-backend  file\n")),(0,r.kt)("p",null,"After a few minutes, you can verify the deposit by querying the account balance using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd query bank balances $(routerd keys show my-orchestrator-key -a --keyring-backend file) --chain-id router_9601-1 --keyring-backend file\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 3.3) Configure the orchestrator keys")),(0,r.kt)("p",null,"Add the relevant keys in ",(0,r.kt)("inlineCode",{parentName:"p"},".router-orchestrator/config.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "chains": [\n        {\n            "chainId": "<CHAIN_ID>",\n            "chainType": "<CHAIN_TYPE>",\n            "chainName": "<CHAIN_NAME>",\n            "chainRpc": "<CHAIN_RPC>",\n            "blocksToSearch": 1000,\n            "blockTime": "10s"\n        }\n    ],\n    "globalConfig": {\n        "networkType": "<NETWORK_TYPE>",\n        "dbPath": "processedblock.db",\n        "ethPrivateKey": "<ETH_PRIVATE_KEY>",\n        "cosmosPrivateKey": "<COSMOS_PRIVATE_KEY>",\n        "batchSize": 100,\n        "batchWaitTime": 20\n    }\n}\n')),(0,r.kt)("p",null,"To g\nrouterd keys unsafe-export-eth-key my-orchestrator-key --keyring-backend file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chains")," is an array of objects including info about all the chains you want to listen to as an orchestrator. This needs to be done only for external chains i.e. Router chain will not be part of the orchestrator chains config. For each chain, you need to provide:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainId")," - the chain id of the network"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainType")," - the type of chain, possible values are:\n",(0,r.kt)("inlineCode",{parentName:"li"},"CHAIN_TYPE_EVM"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"CHAIN_TYPE_COSMOS"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"CHAIN_TYPE_POLKADOT"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"CHAIN_TYPE_SOLANO"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"CHAIN_TYPE_NEAR")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainName")," - the name of the chain"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainRpc")," - the RPC endpoint of the chain")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"globalConfig")," includes global configuration details like:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NETWORK_TYPE")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"testnet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ETH_PRIVATE_KEY")," - the private key of the wallet you created for the validator on EVM chains (not necessary to have have funds in this wallet, it will be used just for signing messages)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"COSMOS_PRIVATE_KEY")," - the private key of the wallet you created for the orchestrator")))),(0,r.kt)("p",null,"To obtain the orchestrator's ",(0,r.kt)("inlineCode",{parentName:"p"},"COSMOS_PRIVATE_KEY"),", run\xa0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd keys unsafe-export-eth-key my-orchestrator-key --keyring-backend file\n")),(0,r.kt)("p",null,"Sample ",(0,r.kt)("inlineCode",{parentName:"p"},".router-orchestrator/config.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "chains": [\n        {\n            "chainId": "80001",\n            "chainType": " CHAIN_TYPE_EVM",\n            "chainName": "Mumbai",\n            "chainRpc": "<RPC_URL>",\n            "blocksToSearch": 1000,\n            "blockTime": "10s"\n        },\n        {\n            "chainId": "43113",\n            "chainType": " CHAIN_TYPE_EVM",\n            "chainName": "Fuji",\n            "chainRpc": "<RPC_URL>",\n            "blocksToSearch": 1000,\n            "blockTime": "10s"\n        }\n    ],\n    "globalConfig": {\n        "mQEndpoint": "amqp://guest:guest@localhost",\n        "networkType": "testnet",\n        "dbPath": "processedblock.db",\n        "ethPrivateKey": "<PRIVATE_KEY>",\n        "cosmosPrivateKey": "<PRIVATE_KEY>",\n        "batchSize": 100,\n        "batchWaitTime": 20\n    }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 3.4) Map the orchestrator with your validator")),(0,r.kt)("p",null,"Every orchestrator needs to be mapped with a validator. This is done by sending a transaction on the chain to map an orchestrator with a validator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd tx attestation set-orchestrator-address $(routerd keys show my-orchestrator-key -a --keyring-backend file) <EVM-ADDRESS-FOR-SIGNING-TXNS> --from my-validator-key --chain-id router_9601-1 --fees 1000000000000000route --keyring-backend file\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EVM-KEY-FOR-SIGNING-TXNS")," is the public address corresponding to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ETH_PRIVATE_KEY")," used in the orchestrator config in the previous step.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 3.5) Start the orchestrator and validator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl restart cosmovisor.service\nsudo systemctl restart orchestrator.service\n")),(0,r.kt)("p",null,"After executing the aforementioned commands, your orchestrator instance will start running. You can check the orchestrator and validator logs to see if everything is working fine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -u orchestrator.service -f\nsudo journalctl -u cosmovisor.service -f\n"))))}p.isMDXComponent=!0}}]);