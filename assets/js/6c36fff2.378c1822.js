"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[2571],{58725:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),o=a(69568);const s={title:"2) Deploying a Sample Application Contract",sidebar_position:2},i=void 0,p={unversionedId:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract",id:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract",title:"2) Deploying a Sample Application Contract",description:"Part 1: Compiling our Application Contract",source:"@site/docs/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract.mdx",sourceDirName:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp",slug:"/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"2) Deploying a Sample Application Contract",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"1) Setting up Router's EVM Tesnet",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet"},next:{title:"3) Deploying a Sample Bridge Contract",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract"}},l={},c=[{value:"Part 1: Compiling our Application Contract",id:"part-1-compiling-our-application-contract",level:2},{value:"Part 2: Deploying a Compiled Contract",id:"part-2-deploying-a-compiled-contract",level:2}],d={toc:c};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"part-1-compiling-our-application-contract"},"Part 1: Compiling our Application Contract"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1)")," Go to ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"https://remix.ethereum.org/")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2)")," In the File Explorer pane, click on the plus icon under the ",(0,r.kt)("strong",{parentName:"p"},"Workspaces")," tab to create a new workspace."),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(61294).Z,alt:"Step 2",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3)")," Under the template option, choose ",(0,r.kt)("strong",{parentName:"p"},"Blank"),", give your workspace an appropriate name and then click on ",(0,r.kt)("strong",{parentName:"p"},"OK"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(61326).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4)")," In your new workspace, create a new file by the name of ",(0,r.kt)("strong",{parentName:"p"},"HelloRouter.sol"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(78368).Z,alt:"Step 4",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 5)")," Copy the following code and paste it into ",(0,r.kt)("strong",{parentName:"p"},"HelloRouter.sol"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport "@routerprotocol/evm-gateway-contracts@1.1.11/contracts/IGateway.sol";\nimport "hardhat/console.sol";\n\ncontract HelloRouter {\n    address public owner;\n    IGateway public gatewayContract;\n    string public greeting;\n\n    error CustomError(string message);\n\n    constructor(address payable gatewayAddress, string memory _feePayer) {\n        owner = msg.sender;\n        gatewayContract = IGateway(gatewayAddress);\n        setDappMetadata(_feePayer);\n    }\n\n    function setDappMetadata(string memory FeePayer) public {\n        require(msg.sender == owner, "Only Owner can set fee payer");\n        gatewayContract.setDappMetadata(FeePayer);\n    }\n\n    function iSend(\n    string calldata destChainId,\n    string calldata destinationContractAddress,\n    string calldata str,\n    bytes calldata requestMetadata\n    ) public payable {\n    bytes memory packet = abi.encode(str);\n    bytes memory requestPacket = abi.encode(destinationContractAddress, packet);\n    gatewayContract.iSend{ value: msg.value }(\n      1,\n      0,\n      string(""),\n      destChainId,\n      requestMetadata,\n      requestPacket\n    );\n    }\n\n    function iReceive(\n    string memory ,//requestSender,\n    bytes memory packet,\n    string memory //srcChainId\n  ) external returns (string memory) {\n    require(msg.sender == address(gatewayContract), "only gateway");\n    greeting = abi.decode(\n      packet,\n      (string)\n    );\n    if (\n      keccak256(abi.encodePacked(greeting)) == keccak256(abi.encodePacked(""))\n    ) {\n      revert CustomError("String should not be empty");\n    }\n    return greeting;\n  }\n\n    receive() external payable {}\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 6)")," Click on the ",(0,r.kt)("strong",{parentName:"p"},"Solidity compiler")," icon (the one shaped like an S), check that your compiler version is within the versions specified in the pragma solidity statement, and click on ",(0,r.kt)("strong",{parentName:"p"},"Compile HelloRouter.sol"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(52679).Z,alt:"Step 6",style:{marginBottom:12}})),(0,r.kt)("p",null,"Once compiled, you should see a green tick mark over the ",(0,r.kt)("strong",{parentName:"p"},"Solidity compiler")," icon."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"part-2-deploying-a-compiled-contract"},"Part 2: Deploying a Compiled Contract"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1)")," Click on the ",(0,r.kt)("strong",{parentName:"p"},"Deploy & run transactions")," icon (the one with the Ethereum logo) and select ",(0,r.kt)("strong",{parentName:"p"},"Injected Provider - Metamask")," as the ",(0,r.kt)("strong",{parentName:"p"},"Environment"),"."),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(26491).Z,alt:"Step 1",style:{marginBottom:12}})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2)")," A MetaMask window will pop up following the previous step. Connect the account that we set up in the guide given ",(0,r.kt)("a",{parentName:"p",href:"./setting-up-routers-evm-devnet#part-2-importing-a-wallet-to-interact-with-the-devnet"},"here"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warning:")," Make sure you're connected to Router's EVM Testnet.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3)")," Add the gateway address for the respective chain (mentioned in the table below), click on ",(0,r.kt)("strong",{parentName:"p"},"Deploy")," and sign the transaction in your MetaMask."),(0,r.kt)(o.Z,{apiData:[{apiUrl:"https://lcd.testnet.routerchain.dev/router-protocol/router-chain/multichain/chain_config",networkType:"Testnet"}],mdxType:"APIData"}),(0,r.kt)("p",{style:{marginBottom:"50px"}}),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(88210).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,r.kt)("p",null,"Sometimes the contract deployment fails due to low gas fees, so make sure to edit the gas fees while signing the transaction in your wallet."),(0,r.kt)("center",null,(0,r.kt)("img",{src:a(38882).Z,alt:"Success",style:{marginBottom:12}})))}m.isMDXComponent=!0},69568:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(9669),o=a.n(r);const s=e=>{let{apiData:t}=e;const[a,r]=(0,n.useState)([]);(0,n.useEffect)((()=>{s()}),[]);const s=async()=>{try{const e=t.map((e=>{let{apiUrl:t}=e;return o().get(t)})),a=await Promise.all(e),n=[];a.forEach(((e,a)=>{const{networkType:r}=t[a],o=e.data.chainConfig.map((e=>({...e,networkType:r})));n.push(...o)})),r(n)}catch(e){console.log(e)}};return n.createElement("div",null,n.createElement("table",null,n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",{style:{fontWeight:"bold"}},"Network Type"),n.createElement("th",{style:{fontWeight:"bold"}},"Chain ID"),n.createElement("th",{style:{fontWeight:"bold"}},"Chain Name"),n.createElement("th",{style:{fontWeight:"bold"}},"Gateway Contract Address"))),n.createElement("tbody",null,a.map((e=>n.createElement("tr",{key:e.chainId},n.createElement("td",null,e.networkType),n.createElement("td",null,e.chainId),n.createElement("td",null,e.chainName),n.createElement("td",null,e.gatewayContractAddress)))))))}},26491:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/part-2-step-1-b5a5b49e8dd3220452bf083dad7bebed.png"},88210:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/part-2-step-3-f2839063f0491140a784aa6f0ab2f4fc.png"},61294:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/step-2-bd5c9bbf57fe6894c0b0982168688706.png"},61326:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/step-3-13901af99eb5e31c636a395f286f90d3.png"},78368:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/step-4-239ecbf1cce83339da6d0083470813c9.png"},52679:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/step-6-5385e1bc0f3af354508a49606f559e14.png"},38882:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/success-ceeaf26dd7fa6967b3baa65b69ecd414.png"}}]);