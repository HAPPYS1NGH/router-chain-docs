"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[166],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,y=p["".concat(s,".").concat(m)]||p[m]||c[m]||o;return a?n.createElement(y,i(i({ref:t},d),{},{components:a})):n.createElement(y,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},44063:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const o={title:"Step 2) Setup a Validator Account",sidebar_position:2},i=void 0,l={unversionedId:"running-a-validator/on-devnet/setup-a-validator-account",id:"running-a-validator/on-devnet/setup-a-validator-account",title:"Step 2) Setup a Validator Account",description:"Before creating a validator account, make sure you run a Sentry node as specified in this guide.",source:"@site/docs/validators/running-a-validator/on-devnet/setup-a-validator-account.md",sourceDirName:"running-a-validator/on-devnet",slug:"/running-a-validator/on-devnet/setup-a-validator-account",permalink:"/validators/running-a-validator/on-devnet/setup-a-validator-account",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-devnet/setup-a-validator-account.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Step 2) Setup a Validator Account",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Step 1) Run a Sentry Node",permalink:"/validators/running-a-validator/on-devnet/run-a-sentry-node"},next:{title:"Step 3) Configure and Run an Orchestrator Instance",permalink:"/validators/running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance"}},s={},u=[],d={toc:u};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Before creating a validator account, make sure you run a Sentry node as specified in this ",(0,r.kt)("a",{parentName:"p",href:"./run-a-sentry-node"},"guide"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2.1) Create a validator account")),(0,r.kt)("p",null,"To setup a validator account, validators need to first run the keygen command with their desired validator key name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export VALIDATOR_KEY_NAME=[my-validator-key]\nrouterd keys add $VALIDATOR_KEY_NAME\n")),(0,r.kt)("p",null,"This will derive a new private key and encrypt it to disk. "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Remember the password used or store it in a safe place. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# example output\n\n- name: myvalidatorkey\n  type: local\n  address: router13cyxzsfvmfxsn23spl4nhu0xn307uvj2vju5q0\n  pubkey: \'{"@type":"/routerprotocol.routerchain.crypto.ethsecp256k1.PubKey",\n  mnemonic: ""\n  \n**Important** write this mnemonic phrase in a safe place.\nIt is the only way to recover your account if you ever forget your password.\n\nusual husband better echo deputy same depart river ritual detail reveal window moon few health remember fortune awful custom fossil tired lake jealous sign\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The mnemonic phrase is better backed up on a physical paper, storing it in cloud storage may compromise the validator later.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Remember the address starting from\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"router"),", this is the address of your Router chain validator account."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2.2) Obtain ROUTE tokens")),(0,r.kt)("p",null,"In order to proceed with the next step, validators will have to obtain ROUTE on the Router Chain."),(0,r.kt)("p",null,"Funds can be requested from the ",(0,r.kt)("a",{parentName:"p",href:"https://devnet-faucet.routerprotocol.com/"},"devnet faucet"),"."),(0,r.kt)("p",null,"After a few minutes, you can verify the deposit on the ",(0,r.kt)("a",{parentName:"p",href:"https://devnet-explorer.routerprotocol.com"},"explorer UI"),". Alternatively, account balance can be queried using the ",(0,r.kt)("inlineCode",{parentName:"p"},"routerd"),"\xa0CLI with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd q bank balances <validator-router-address>\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2.3) Set the staking parameters and run your validator account")),(0,r.kt)("p",null,"Obtain your node's tendermint validator Bech32 encoded PubKey consensus address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'VALIDATOR_PUBKEY=$(routerd tendermint show-validator)\necho $VALIDATOR_PUBKEY\n\n# Example: {"@type":"/cosmos.crypto.ed25519.PubKey","key":"ayAh1DfEkV2r2tglb/yWKlk67Xc5VFPFLdWb2zfoR5o="}\n')),(0,r.kt)("p",null,"Now, initialize new validator with a self-delegation of ROUTE tokens. Most critically, you will need to decide on the values of the validator's staking parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"moniker"),"\xa0- Validator's name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),"\xa0- Validator's initial amount of ROUTE to bond"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commission-max-change-rate"),"\xa0- Validator's maximum commission change rate percentage (per day)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commission-max-rate"),"\xa0- Validator's maximum commission rate percentage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commission-rate"),"\xa0- Validator's initial commission rate percentage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min-self-delegation"),"\xa0- Validator's minimum required self delegation")),(0,r.kt)("p",null,"Once the parameters are decided, set them as follows -"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MONIKER=<my-moniker>\nAMOUNT=100000000000000000000router # to delegate 100 ROUTE, as ROUTE is represented with 18 decimals.\nCOMMISSION_MAX_CHANGE_RATE=0.1 # e.g. for a 10% maximum change rate percentage per day\nCOMMISSION_MAX_RATE=0.1 # e.g. for a 10% maximum commission rate percentage\nCOMMISSION_RATE=0.1 # e.g. for a 10% initial commission rate percentage\nMIN_SELF_DELEGATION_AMOUNT=50000000000000000000 # e.g. for a minimum 50 ROUTE self delegation required on the validator\n")),(0,r.kt)("p",null,"Finally, run the following command to finish setting up your validator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd tx staking create-validator \\\n--moniker=$MONIKER \\\n--amount=$AMOUNT \\\n--gas-prices=500000000route \\\n--pubkey=$VALIDATOR_PUBKEY \\\n--from=$VALIDATOR_KEY_NAME \\\n--keyring-backend=file \\\n--yes \\\n--node=tcp://localhost:26657 \\\n--chain-id=router-1\n--commission-max-change-rate=$COMMISSION_MAX_CHANGE_RATE \\\n--commission-max-rate=$COMMISSION_MAX_RATE \\\n--commission-rate=$COMMISSION_RATE \\\n--min-self-delegation=$MIN_SELF_DELEGATION_AMOUNT\n")),(0,r.kt)("p",null,"Extra\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"create-validator"),"\xa0options to consider:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"--identity=             The optional identity signature (ex. UPort or Keybase)\n--pubkey=               The Bech32 encoded PubKey of the validator\n--security-contact=     Security contact email (optional) of the validator\n--website=              Website (optional) of the validator\n")),(0,r.kt)("p",null,"Verify that the validator was successfully setup by checking the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://devnet-hub.routerprotocol.com/staking"},"staking dashboard")," or by entering the CLI command given below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"routerd q staking validators\n")),(0,r.kt)("p",null,"If you see your validator in the list of validators, then congratulations, you have officially joined the Router devnet as a staking validator! \ud83c\udf89")),(0,r.kt)("p",null,"After setting up the validator, immediately proceed to setup the orchestrator. This is a necessary step in order to prevent the validator from being slashed."))}c.isMDXComponent=!0}}]);