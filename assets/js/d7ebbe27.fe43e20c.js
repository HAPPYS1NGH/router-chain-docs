"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[2053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,f=h["".concat(c,".").concat(d)]||h[d]||u[d]||o;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},78919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Check the Status",sidebar_position:4},s=void 0,i={unversionedId:"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status",id:"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status",title:"Check the Status",description:"After executing a cross-chain transaction, you can also check its status by querying the following API:",source:"@site/docs/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status.md",sourceDirName:"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction",slug:"/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status",permalink:"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Check the Status",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Execute the Transaction",permalink:"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/execute-transaction"},next:{title:"Voyager JS SDK",permalink:"/develop/voyager/tools/voyager-js-sdk/"}},c={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"After executing a cross-chain transaction, you can also check its status by querying the following API:"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can find the API information ",(0,a.kt)("a",{parentName:"p",href:"../../../../../api/?v=PATHFINDER"},(0,a.kt)("strong",{parentName:"a"},"here")),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import axios from "axios"\n\nconst STATS_API_URL = "https://api.stats.routerprotocol.com/api"\n\n// calling the status api using axios\nconst fetchStatus = async (params) => {\n    const endpoint = "status"\n    const pathUrl = `${STATS_API_URL}/${endpoint}`\n    console.log(pathUrl)\n    try {\n        const res = await axios.get(pathUrl, { params })\n        return res.data\n    } catch (e) {\n        console.error(`Fetching data from API: ${e}`)\n    }\n}\n\nconst main = async () => {\n    // sending the transaction using the data prepared by us in step 3\n    const tx = await wallet.sendTransaction(pathfinder_response.txn.execution)\n    try {\n        await tx.wait();\n        console.log(`Transaction mined successfully: ${tx.hash}`)\n    }\n    catch (error) {\n        console.log(`Transaction failed with error: ${error}`)\n        return\n    }\n    \n    let params = {\n        txHash: tx.hash,\n        networkId: args.fromTokenChainId // args were defined in step 1 to fetch data from the pathfinder\n    }\n    \n   setTimeout(async function() {\n        let status = await fetchStatus(params) \n        console.log(status)\n        if (status.tx_status_code === 1) {\n            console.log("Transaction completed")\n          // handle the case where the transaction is complete \n        }\n        else if (status.tx_status_code === 0) {\n            console.log("Transaction still pending")\n        // handle the case where the transaction is still pending\n        }\n      }, 180000); // waiting for sometime before fetching the status of the transaction\n}\n\nmain()\n')))}u.isMDXComponent=!0}}]);