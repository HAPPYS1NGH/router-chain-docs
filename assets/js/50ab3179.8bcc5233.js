"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[4364],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,k=p["".concat(s,".").concat(m)]||p[m]||c[m]||o;return a?n.createElement(k,i(i({ref:t},u),{},{components:a})):n.createElement(k,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},72411:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const o={title:"Create a Validator Account",sidebar_position:2},i=void 0,l={unversionedId:"running-a-validator/on-devnet/create-a-validator-account",id:"running-a-validator/on-devnet/create-a-validator-account",title:"Create a Validator Account",description:"Step 0) Run Sentry Node",source:"@site/docs/validators/running-a-validator/on-devnet/create-a-validator-account.md",sourceDirName:"running-a-validator/on-devnet",slug:"/running-a-validator/on-devnet/create-a-validator-account",permalink:"/validators/running-a-validator/on-devnet/create-a-validator-account",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-devnet/create-a-validator-account.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Create a Validator Account",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Run a Sentry Node on Devnet",permalink:"/validators/running-a-validator/on-devnet/run-a-sentry-node-on-devnet"},next:{title:"Configure and Run an Orchestrator Instance",permalink:"/validators/running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance"}},s={},d=[],u={toc:d};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 0) Run Sentry Node")),(0,r.kt)("p",null,"The sentry node needs to be run before becoming a Validator. Follow this ",(0,r.kt)("a",{parentName:"p",href:"./sentry-node-devnet"},"guide")," to run the sentry node.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 1) Create a Validator Account")),(0,r.kt)("p",null,"First, Validators need to run the keygen command with their desired validator key name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export VALIDATOR_KEY_NAME=[my-validator-key]\nrouterd keys add $VALIDATOR_KEY_NAME\n")),(0,r.kt)("p",null,"This will derive a new private key and encrypt it to disk. "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Make sure to remember the password used.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'# EXAMPLE OUTPUT\n\n- name: myvalidatorkey\n  type: local\n  address: router13cyxzsfvmfxsn23spl4nhu0xn307uvj2vju5q0\n  pubkey: \'{"@type":"/routerprotocol.routerchain.crypto.ethsecp256k1.PubKey","key":"As2n8GzVhgxJqzGSpFa7x6OFiHXYfdDwYFyp13DRWWlu"}\'\n  mnemonic: ""\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Write this mnemonic phrase in a safe place.\nIt is the only way to recover the account in case password is lost.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"usual husband better echo deputy same depart river ritual detail reveal window moon few health remember fortune awful custom fossil tired lake jealous sign")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The output will contain a mnemonic phrase that represents the key in plain text. This phrase should be saved as a backup of the key since without a key validator can't control their validator. The phrase is better backed up on physical paper, storing it in cloud storage may compromise the validator later.")),(0,r.kt)("p",null,"Remember the address starting from\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"router"),", this is going to be the Router Chain Validator Account address.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 2) Obtain $ROUTE")),(0,r.kt)("p",null,"In order to proceed with the next step, validators will have to obtain $ROUTE on the Router Chain."),(0,r.kt)("p",null,"Funds can be requested from the ",(0,r.kt)("a",{parentName:"p",href:"https://devnet-faucet.routerprotocol.com/"},"devnet faucet"),"."),(0,r.kt)("p",null,"After a few minutes, deposit can be verified on the UI. Alternatively, account balance can be queried using the ",(0,r.kt)("inlineCode",{parentName:"p"},"routerd"),"\xa0CLI with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"routerd q bank balances <validator-router-address>\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Step 3) Create validator account")),(0,r.kt)("p",null,"Obtain node's tendermint validator Bech32 encoded PubKey consensus address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'VALIDATOR_PUBKEY=$(routerd tendermint show-validator)\necho $VALIDATOR_PUBKEY\n\n# Example: {"@type":"/cosmos.crypto.ed25519.PubKey","key":"ayAh1DfEkV2r2tglb/yWKlk67Xc5VFPFLdWb2zfoR5o="}\n')),(0,r.kt)("p",null,"Create a new validator initialized with a self-delegation of the $ROUTE tokens. Most critically, validators need to decide on the values of the validator's staking parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-moniker"),"\xa0- Validator's name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-amount"),"\xa0- Validator's initial amount of ROUTE to bond"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-commission-max-change-rate"),"\xa0- Validator's maximum commission change rate percentage (per day)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-commission-max-rate"),"\xa0- Validator's maximum commission rate percentage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-commission-rate"),"\xa0- Validator's initial commission rate percentage"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-min-self-delegation"),"\xa0- Validator's minimum required self delegation")),(0,r.kt)("p",null,"Once the parameters are decided, set them as follows -"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"MONIKER=<my-moniker>\nAMOUNT=100000000000000000000router # to delegate 100 ROUTE, as ROUTE is represented with 18 decimals.\nCOMMISSION_MAX_CHANGE_RATE=0.1 # e.g. for a 10% maximum change rate percentage per day\nCOMMISSION_MAX_RATE=0.1 # e.g. for a 10% maximum commission rate percentage\nCOMMISSION_RATE=0.1 # e.g. for a 10% initial commission rate percentage\nMIN_SELF_DELEGATION_AMOUNT=50000000000000000000 # e.g. for a minimum 50 ROUTE self delegation required on the validator\n")),(0,r.kt)("p",null,"Run the following command to create the validator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"routerd tx staking create-validator \\\n--moniker=$MONIKER \\\n--amount=$AMOUNT \\\n--gas-prices=500000000route \\\n--pubkey=$VALIDATOR_PUBKEY \\\n--from=$VALIDATOR_KEY_NAME \\\n--keyring-backend=file \\\n--yes \\\n--node=tcp://localhost:26657 \\\n--chain-id=router-1\n--commission-max-change-rate=$COMMISSION_MAX_CHANGE_RATE \\\n--commission-max-rate=$COMMISSION_MAX_RATE \\\n--commission-rate=$COMMISSION_RATE \\\n--min-self-delegation=$MIN_SELF_DELEGATION_AMOUNT\n")),(0,r.kt)("p",null,"Extra\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"create-validator"),"\xa0options to consider:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"--identity=             The optional identity signature (ex. UPort or Keybase)\n--pubkey=               The Bech32 encoded PubKey of the validator\n--security-contact=     The validator's (optional) security contact email\n--website=              The validator's (optional) website\n")),(0,r.kt)("p",null,"Verify that the validator was successfully created by checking the\xa0",(0,r.kt)("a",{parentName:"p",href:"https://devnet-hub.routerprotocol.com/staking"},"staking dashboard"),"\xa0or by entering the below CLI command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"routerd q staking validators\n")),(0,r.kt)("p",null,"If you see your validator in the list of validators, then congratulations, you have officially joined as a Router Devnet Staking validator! \ud83c\udf89")),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Next Steps")),(0,r.kt)("p",null,"Next, proceed to setup the Orchestrator. This is a necessary step in order to prevent the validator from being slashed. This should be done immediately after setting up the validator.")))}c.isMDXComponent=!0}}]);