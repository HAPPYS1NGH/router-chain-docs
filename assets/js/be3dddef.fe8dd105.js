"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[9461],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,g=p["".concat(u,".").concat(m)]||p[m]||c[m]||s;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var l=2;l<s;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},61422:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const s={title:"Fetch data using GQL Playground",sidebar_position:1},r="How to fetch data using GQL Playground",i={unversionedId:"router-scan/fetch-data-using-gql-playground",id:"router-scan/fetch-data-using-gql-playground",title:"Fetch data using GQL Playground",description:"You can try the GraphQL queries by using the following link - https://devnet-explorer-api.routerprotocol.com/gql. \u201cDocs\u201d section can be referred from the right top of the page and the various available  query endpoints can be looked at.",source:"@site/docs/infra/router-scan/fetch-data-using-gql-playground.md",sourceDirName:"router-scan",slug:"/router-scan/fetch-data-using-gql-playground",permalink:"/infra/router-scan/fetch-data-using-gql-playground",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/infra/router-scan/fetch-data-using-gql-playground.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Fetch data using GQL Playground",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"RouterScan",permalink:"/infra/router-scan/"},next:{title:"Fetch data using JS",permalink:"/infra/router-scan/fetch-data-using-js"}},u={},l=[{value:"Overview",id:"overview",level:3},{value:"To get the latest blocks",id:"to-get-the-latest-blocks",level:3},{value:"To get a specific block\u2019s data",id:"to-get-a-specific-blocks-data",level:3},{value:"Overview",id:"overview-1",level:3},{value:"To get the latest transactions data",id:"to-get-the-latest-transactions-data",level:3},{value:"To get a specific transaction\u2019s data",id:"to-get-a-specific-transactions-data",level:3},{value:"Overview",id:"overview-2",level:3},{value:"To get the latest inbounds data",id:"to-get-the-latest-inbounds-data",level:3},{value:"To get a specific inbound\u2019s data",id:"to-get-a-specific-inbounds-data",level:3},{value:"To get a search inbound data",id:"to-get-a-search-inbound-data",level:3},{value:"Overview",id:"overview-3",level:3},{value:"To get the latest outbounds data",id:"to-get-the-latest-outbounds-data",level:3},{value:"To get a specific outbound\u2019s data",id:"to-get-a-specific-outbounds-data",level:3},{value:"To get a search outbound data",id:"to-get-a-search-outbound-data",level:3}],d={toc:l};function c(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-fetch-data-using-gql-playground"},"How to fetch data using GQL Playground"),(0,o.kt)("p",null,"You can try the GraphQL queries by using the following link - ",(0,o.kt)("a",{parentName:"p",href:"https://devnet-explorer-api.routerprotocol.com/gql"},"https://devnet-explorer-api.routerprotocol.com/gql"),". \u201cDocs\u201d section can be referred from the right top of the page and the various available  query endpoints can be looked at."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"gql-playground.svg",src:n(70661).Z,width:"1429",height:"728"})),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Blocks")),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("p",null,"To query the data for blocks, you can use the blocks query. Below we have provided a few sample queries on how you can fetch desired blocks data using GraphQL."),(0,o.kt)("h3",{id:"to-get-the-latest-blocks"},"To get the latest blocks"),(0,o.kt)("p",null,"To get the latest blocks from the explorer you can use the below query. The parameters offset and limit can be passed as required to get the outcome needed."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'The parameters can be set in the \u201cQuery Variables\u201d section on the GraphQL playground. An example to set the parameters is as below - {"limit": 1, "offset": 1}')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getLatestBlocks($limit: Int!, $offset: Int!) {\n  paginatedBlock(sortBy:{_id:desc},limit:$limit,offset:$offset){\n    totalRecords\n    blocks{\n      _id\n      hash\n      proposer\n      txn_count\n      timestamp\n      transactions{\n         _id\n        height\n        sender\n        status\n        receiver\n        timeStamp\n        gasWanted\n        gasUsed\n        fee\n        event_logs\n        success\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  "data": {\n    "paginatedBlock": {\n      "totalRecords": 15641,\n      "blocks": [\n        {\n          "_id": 15641,\n          "hash": "1C6BC272B52029A27D574A9E68269E9079A6E33AD4DBC3B4754874CE6EE4B0E6",\n          "proposer": "4EC53962072D60BE17C849C98902EC05B22076E4",\n          "txn_count": 0,\n          "timestamp": "2023-01-02T08:55:57Z",\n          "transactions": []\n        }\n      ]\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"to-get-a-specific-blocks-data"},"To get a specific block\u2019s data"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getBlockByHeight($height: Int!){\n  block(_id:$height){\n    _id\n    hash\n    proposer\n    txn_count\n    timestamp\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  "data": {\n    "block": {\n      "_id": 1234,\n      "hash": "92144B399796060CF32831077D34C5F3F67275E57572218B5BFC9BEDDDD0F44B",\n      "proposer": "12B6CFEA58C5A3BC8CB194F4AE4E4610827083FC",\n      "txn_count": 0,\n      "timestamp": "2023-01-02T01:30:33Z"\n    }\n  }\n}\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Transactions")),(0,o.kt)("h3",{id:"overview-1"},"Overview"),(0,o.kt)("p",null,"To query the data for transactions, you can use the below examples. "),(0,o.kt)("h3",{id:"to-get-the-latest-transactions-data"},"To get the latest transactions data"),(0,o.kt)("p",null,"To get the latest transactions from the explorer you can use the below query. The parameters offset and limit can be passed as required to get the outcome needed."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'The parameters can be set in the \u201cQuery Variables\u201d section on the GraphQL playground. An example to set the parameters is as below -\n{"limit": 1, "offset": 1}')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getLatestTransactions($limit: Int!, $offset: Int!){\n    paginatedTransaction(sortBy:{height:desc,timeStamp:desc},limit:$limit,offset:$offset){\n    totalRecords\n  transactions{\n     _id\n    height\n    sender\n    status\n    receiver\n    timeStamp\n    gasWanted\n    gasUsed\n    fee\n    event_logs\n    success\n    rawLog\n    routePrice\n  }\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  "data": {\n    "paginatedTransaction": {\n      "totalRecords": 17,\n      "transactions": [\n        {\n          "_id": "4BB9D33522003683D23AF08A463248B77A65F0992C8FFAD730BD6F766B261E27",\n          "height": 12886,\n          "sender": "router1hvaau9fkk4xssmqe455mfujzd2hs6jnsy0rcdj",\n          "status": "",\n          "receiver": "router1gmj4z4vr3rn8ptzcumyycp6eegkuhehrlzlws2",\n          "timeStamp": "2023-01-02T07:30:46Z",\n          "gasWanted": "",\n          "gasUsed": "",\n          "fee": "100000000000000router",\n          "event_logs": "",\n          "success": "",\n          "rawLog": "[{\\"events\\":[{\\"type\\":\\"coin_received\\",\\"attributes\\":[{\\"key\\":\\"receiver\\",\\"value\\":\\"router1gmj4z4vr3rn8ptzcumyycp6eegkuhehrlzlws2\\"},{\\"key\\":\\"amount\\",\\"value\\":\\"1000000000000000000router\\"}]},{\\"type\\":\\"coin_spent\\",\\"attributes\\":[{\\"key\\":\\"spender\\",\\"value\\":\\"router1hvaau9fkk4xssmqe455mfujzd2hs6jnsy0rcdj\\"},{\\"key\\":\\"amount\\",\\"value\\":\\"1000000000000000000router\\"}]},{\\"type\\":\\"message\\",\\"attributes\\":[{\\"key\\":\\"action\\",\\"value\\":\\"/cosmos.bank.v1beta1.MsgSend\\"},{\\"key\\":\\"sender\\",\\"value\\":\\"router1hvaau9fkk4xssmqe455mfujzd2hs6jnsy0rcdj\\"},{\\"key\\":\\"module\\",\\"value\\":\\"bank\\"}]},{\\"type\\":\\"transfer\\",\\"attributes\\":[{\\"key\\":\\"recipient\\",\\"value\\":\\"router1gmj4z4vr3rn8ptzcumyycp6eegkuhehrlzlws2\\"},{\\"key\\":\\"sender\\",\\"value\\":\\"router1hvaau9fkk4xssmqe455mfujzd2hs6jnsy0rcdj\\"},{\\"key\\":\\"amount\\",\\"value\\":\\"1000000000000000000router\\"}]}]}]",\n          "routePrice": "1.7062257784837516"\n        }\n      ]\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"to-get-a-specific-transactions-data"},"To get a specific transaction\u2019s data"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getTransactionByHash($hash: String!){\n  transaction(_id:$hash){\n      _id\n      height\n      sender\n      status\n      receiver\n      timeStamp\n      gasWanted\n      gasUsed\n      fee\n      event_logs\n      success\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  "data": {\n    "transaction": {\n      "_id": "4BB9D33522003683D23AF08A463248B77A65F0992C8FFAD730BD6F766B261E27",\n      "height": 12886,\n      "sender": "router1hvaau9fkk4xssmqe455mfujzd2hs6jnsy0rcdj",\n      "status": "",\n      "receiver": "router1gmj4z4vr3rn8ptzcumyycp6eegkuhehrlzlws2",\n      "timeStamp": "2023-01-02T07:30:46Z",\n      "gasWanted": "",\n      "gasUsed": "",\n      "fee": "100000000000000router",\n      "event_logs": "",\n      "success": ""\n    }\n  }\n}\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Inbounds")),(0,o.kt)("h3",{id:"overview-2"},"Overview"),(0,o.kt)("p",null,"To query the data for inbound transactions, you can use the below examples. These are the transactions coming into Router chain from any other EVM/non-EVM chain."),(0,o.kt)("h3",{id:"to-get-the-latest-inbounds-data"},"To get the latest inbounds data"),(0,o.kt)("p",null,"To get the latest inbound transactions from the explorer you can use the below query. The parameters offset and limit can be passed as required to get the outcome needed."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'The parameters can be set in the \u201cQuery Variables\u201d section on the GraphQL playground. An example to set the parameters is as below -\n{"limit": 1, "offset": 1}')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getLatestInbounds($limit: Int!, $offset: Int!){\n    paginatedInbound(sortBy:{blockHeight:desc},limit:$limit,offset:$offset){\n    totalRecords\n    inbounds{\n      attestationId\n      chainType\n      attestationType\n      chainId\n      eventNonce\n      blockHeight\n      sourceTxHash\n      sourceSender\n      routerBridgeContract\n      payload\n      status\n      formAttestationId\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      confirmations{\n        validator\n        txnHash\n        timestamp\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"")),(0,o.kt)("h3",{id:"to-get-a-specific-inbounds-data"},"To get a specific inbound\u2019s data"),(0,o.kt)("p",null,"In order to get data for a specific inbound request using the attestation id, you can use the below query."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getInboundByFormAttestationId($formAttestationId: String!){\n  inbound(formAttestationId:$formAttestationId){\n    attestationId\n    chainType\n    attestationType\n    chainId\n    eventNonce\n    blockHeight\n    sourceTxHash\n    sourceSender\n    routerBridgeContract\n    payload\n    status\n    formAttestationId\n    historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      confirmations{\n        validator\n        txnHash\n        timestamp\n      }\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"")),(0,o.kt)("h3",{id:"to-get-a-search-inbound-data"},"To get a search inbound data"),(0,o.kt)("p",null,"In case you need to search for inbound transactions using various parameters, below sample query which can be used. You can add or remove conditions based on the requirement."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getLatestInbounds($searchTerm: String!,$limit: Int!, $offset: Int!){\n    paginatedInbound(where_or:{sourceTxHash:$searchTerm,sourceSender:$searchTerm,routerBridgeContract:$searchTerm,formAttestationId:$searchTerm},sortBy:{blockHeight:desc},limit:$limit,offset:$offset){\n    totalRecords\n    inbounds{\n      attestationId\n      chainType\n      attestationType\n      chainId\n      eventNonce\n      blockHeight\n      sourceTxHash\n      sourceSender\n      routerBridgeContract\n      payload\n      status\n      formAttestationId\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      confirmations{\n        validator\n        txnHash\n        timestamp\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},""))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"Outbounds")),(0,o.kt)("h3",{id:"overview-3"},"Overview"),(0,o.kt)("p",null,"To query the data for outbound transactions, you can use the below examples. These are the transactions from Router chain to any other EVM/non-EVM chain."),(0,o.kt)("h3",{id:"to-get-the-latest-outbounds-data"},"To get the latest outbounds data"),(0,o.kt)("p",null,"To get the latest inbound transactions from the explorer you can use the below query. The parameters offset and limit can be passed as required to get the outcome needed."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'The parameters can be set in the \u201cQuery Variables\u201d section on the GraphQL playground. An example to set the parameters is as below -\n{"limit": 1, "offset": 1}')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getLatestOutbounds($limit: Int!, $offset: Int!){\n    paginatedOutbound(sortBy:{blockHeight:desc},limit:$limit,offset:$offset){\n    totalRecords\n    outbounds{\n      eventNonce\n      destinationChainType\n      destinationChainId\n      relayerFee\n      outgoingTxFee\n      isAtomic\n      sourceAddress\n      expiryTimestamp\n      status\n      contractCalls\n      ackFormAttestationId\n      formAttestationId\n      attestationId\n      outgoingTxNonce\n      outboundTxRequestedBy\n      destinationTxHash\n      feeConsumed\n      blockHeight\n      historyStatus{\n        status\n        txnHash\n        timestamp\n        blockHeight\n      }\n     outboundSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      outboundACKSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      contractsExecutionData{\n        destContractAddress\n        status\n        payload\n      }\n      confirmations{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      contractAckResponses\n    }\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"")),(0,o.kt)("h3",{id:"to-get-a-specific-outbounds-data"},"To get a specific outbound\u2019s data"),(0,o.kt)("p",null,"In order to get data for a specific outbound request using the attestation id, you can use the below query."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getOutboundByFormAttestationId($formAttestationId: String!){\n  outbound(formAttestationId:$formAttestationId){\n      eventNonce\n      destinationChainType\n      destinationChainId\n      relayerFee\n      outgoingTxFee\n      isAtomic\n      sourceAddress\n      expiryTimestamp\n      status\n      contractCalls\n      ackFormAttestationId\n      formAttestationId\n      attestationId\n      outgoingTxNonce\n      outboundTxRequestedBy\n      destinationTxHash\n      feeConsumed\n      blockHeight\n      historyStatus{\n        status\n        txnHash\n        timestamp\n        blockHeight\n      }\n     outboundSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      outboundACKSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      contractsExecutionData{\n        destContractAddress\n        status\n        payload\n      }\n      confirmations{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      contractAckResponses\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"")),(0,o.kt)("h3",{id:"to-get-a-search-outbound-data"},"To get a search outbound data"),(0,o.kt)("p",null,"In case you need to search for outbound request using various parameters, below sample query which can be used. You can add or remove conditions based on the requirement."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Request")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query getLatestOutbounds($destinationChainType: String!,$destinationChainId: String!,$sourceAddress: String!,$limit: Int!, $offset: Int!){\n    paginatedOutbound(where:{destinationChainType:$destinationChainType,destinationChainId:$destinationChainId,sourceAddress:$sourceAddress},sortBy:{blockHeight:desc},limit:$limit,offset:$offset){\n    totalRecords\n    outbounds{\n      eventNonce\n      destinationChainType\n      destinationChainId\n      relayerFee\n      outgoingTxFee\n      isAtomic\n      sourceAddress\n      expiryTimestamp\n      status\n      contractCalls\n      ackFormAttestationId\n      formAttestationId\n      attestationId\n      outgoingTxNonce\n      outboundTxRequestedBy\n      destinationTxHash\n      feeConsumed\n      blockHeight\n      historyStatus{\n        status\n        txnHash\n        timestamp\n        blockHeight\n      }\n     outboundSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      outboundACKSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n      contractsExecutionData{\n        destContractAddress\n        status\n        payload\n      }\n      contractAckResponses\n      confirmations{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n      }\n    }\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},""))))}c.isMDXComponent=!0},70661:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/gql-plyground-query-6731c2a008d961cdb7fc059fc4e868b5.png"}}]);