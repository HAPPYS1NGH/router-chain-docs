"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[4402],{3905:(t,e,r)=>{r.d(e,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function s(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),p=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):s(s({},e),t)),r},c=function(t){var e=p(t.components);return n.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),d=p(r),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(g,s(s({ref:e},c),{},{components:r})):n.createElement(g,s({ref:e},c))}));function m(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},54429:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={title:"1) Setting up Router's EVM Tesnet",sidebar_position:1},s=void 0,i={unversionedId:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet",id:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet",title:"1) Setting up Router's EVM Tesnet",description:"To create cross-chain applications using the Router infrastructure, users will have to build and deploy application contracts on various third-party chains. To simulate an EVM environment for smart contract deployment and interaction, we have created Router's own EVM-compatible Testnet.",source:"@site/docs/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet.md",sourceDirName:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp",slug:"/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"1) Setting up Router's EVM Tesnet",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Your First OmniChain dApp",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/"},next:{title:"2) Deploying a Sample Application Contract",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract"}},l={},p=[{value:"Part 1: Adding Router&#39;s EVM Testnet",id:"part-1-adding-routers-evm-testnet",level:2},{value:"Part 2: Importing a Wallet to Interact with the Devnet",id:"part-2-importing-a-wallet-to-interact-with-the-devnet",level:2}],c=(u="MetaMaskNetwork",function(t){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)});var u;const d={toc:p};function m(t){let{components:e,...o}=t;return(0,a.kt)("wrapper",(0,n.Z)({},d,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { MetaMaskNetwork } from '../../../src/components/MetaMaskNetwork';\n")),(0,a.kt)("p",null,"To create cross-chain applications using the Router infrastructure, users will have to build and deploy application contracts on various third-party chains. To simulate an EVM environment for smart contract deployment and interaction, we have created Router's own EVM-compatible Testnet."),(0,a.kt)("h2",{id:"part-1-adding-routers-evm-testnet"},"Part 1: Adding Router's EVM Testnet"),(0,a.kt)("p",null,"To set up Router's EVM Testnet on your MetaMask wallet, you can use two approaches:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("b",null,"Option 1) Add the Network Manually")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," Log in to your MetaMask wallet and go to ",(0,a.kt)("strong",{parentName:"p"},"Settings"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(1882).Z,alt:"Step 1",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," Go to ",(0,a.kt)("strong",{parentName:"p"},"Networks > Add Network"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(12878).Z,alt:"Step 2",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3)")," Click on ",(0,a.kt)("strong",{parentName:"p"},"Add a network manually"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(27708).Z,alt:"Step 3",style:{width:750,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4)")," Add the following details and click on ",(0,a.kt)("strong",{parentName:"p"},"Save"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Field")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Entry")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Network name")),(0,a.kt)("td",{parentName:"tr",align:null},"Router EVM Testnet")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"New RPC URL")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://evm.rpc.testnet.routerchain.dev"},"https://evm.rpc.testnet.routerchain.dev"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Chain ID")),(0,a.kt)("td",{parentName:"tr",align:null},"9601")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Currency Symbol")),(0,a.kt)("td",{parentName:"tr",align:null},"ROUTE")))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warning:")," Leave the ",(0,a.kt)("strong",{parentName:"p"},"Block explorer URL")," blank.")),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(68525).Z,alt:"Step 4",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,"Following the previous step, you should be able to see Router EVM Testnet as one of your networks."),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(84203).Z,alt:"Check",style:{width:300,marginBottom:12}}))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("b",null,"Option 2) Add the Network with a Single Click")),(0,a.kt)(c,{mdxType:"MetaMaskNetwork"})),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"part-2-importing-a-wallet-to-interact-with-the-devnet"},"Part 2: Importing a Wallet to Interact with the Devnet"),(0,a.kt)("p",null,"Now that we have added our network, it's time to import a wallet to interact with it. To do so, follow these steps:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," Click on ",(0,a.kt)("strong",{parentName:"p"},"Import Account"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," Paste the private key given below and click on ",(0,a.kt)("strong",{parentName:"p"},"Import"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{\n    PRIVATE_KEY: 982e38580b1d24d1c7de91de112f89f200e09e31395837dfbaf5a62d9fbe44f7\n}\n")),(0,a.kt)("p",null,"Post this step, you should be able to see this account in your MetaMask wallet: ",(0,a.kt)("inlineCode",{parentName:"p"},"0x33B4A007EcC80Bc99578c18Da07da704c5403236")))}m.isMDXComponent=!0},84203:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/check-702c2735de839eea289be1aec53dc791.png"},1882:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/step-1-cf3c4c20fc3c72403a2abd6d89e51055.png"},12878:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/step-2-e5af5364181735efa71a86e11b350585.png"},27708:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/step-3-0731e578f41e300879acacafd0ab43c3.png"},68525:(t,e,r)=>{r.d(e,{Z:()=>n});const n=r.p+"assets/images/step-4-d1b87a39e88335cf9ffb96f29e1df6cf.png"}}]);