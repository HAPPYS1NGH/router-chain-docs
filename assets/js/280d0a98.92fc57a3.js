"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[8733],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(a),f=n,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||s;return a?r.createElement(m,i(i({ref:t},l),{},{components:a})):r.createElement(m,i({ref:t},l))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var c=2;c<s;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},21203:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const s={title:"set_dapp_metadata",sidebar_position:5},i="set_dapp_metadata Function",o={unversionedId:"message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata",id:"message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata",title:"set_dapp_metadata",description:"- To facilitate cross-chain transactions, it is necessary to cover the fees on the Router chain. This is achieved via the setdappmetadata function available in the Gateway contracts. The function takes a feepayeraddress parameter, which represents the account responsible for covering the transaction fees for any cross-chain requests originating from the dApp.",source:"@site/docs/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata.md",sourceDirName:"message-transfer-via-crosstalk/near-guides/iDapp-functions",slug:"/message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata",permalink:"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"set_dapp_metadata",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"i_ack",permalink:"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/i_ack"},next:{title:"ASM Implementation",permalink:"/develop/message-transfer-via-crosstalk/near-guides/asm-implementation/"}},p={},c=[],l={toc:c};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"set_dapp_metadata-function"},(0,n.kt)("inlineCode",{parentName:"h1"},"set_dapp_metadata")," Function"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"fn set_dapp_metadata(&self, fee_payer_address: String);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"To facilitate cross-chain transactions, it is necessary to cover the fees on the Router chain. This is achieved via the ",(0,n.kt)("inlineCode",{parentName:"p"},"set_dapp_metadata")," function available in the Gateway contracts. The function takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"fee_payer_address")," parameter, which represents the account responsible for covering the transaction fees for any cross-chain requests originating from the dApp.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Once the ",(0,n.kt)("inlineCode",{parentName:"p"},"fee_payer_address")," is set, the designated fee payer must approve the request to act as the fee payer on the Router chain. Without this approval, dApps will not be able to execute any cross-chain transactions.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"It's important to note that any fee refunds resulting from these transactions will be credited back to the dApp's ",(0,n.kt)("inlineCode",{parentName:"p"},"fee_payer_address")," on the Router chain."))))}d.isMDXComponent=!0}}]);