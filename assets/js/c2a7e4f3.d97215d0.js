"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[312],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,g=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Fetch data using JS",sidebar_position:2},i=void 0,s={unversionedId:"infra/router-scan/fetch-data-using-js",id:"infra/router-scan/fetch-data-using-js",title:"Fetch data using JS",description:"To fetch the data using JavaScript for all the query examples mentioned in the previous section, the following code snippet demonstrates how it can be achieved.",source:"@site/docs/tooling/infra/router-scan/fetch-data-using-js.md",sourceDirName:"infra/router-scan",slug:"/infra/router-scan/fetch-data-using-js",permalink:"/tooling/infra/router-scan/fetch-data-using-js",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/tooling/infra/router-scan/fetch-data-using-js.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Fetch data using JS",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Fetch data using GQL Playground",permalink:"/tooling/infra/router-scan/fetch-data-using-gql-playground"},next:{title:"Application-specific Explorer",permalink:"/tooling/category/application-specific-explorer"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To fetch the data using JavaScript for all the query examples mentioned in the previous section, the following code snippet demonstrates how it can be achieved."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"const response = await axios.post(\n      API_URL,\n      {\n        query: queryTag,\n        variables: options,\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n")),(0,a.kt)("p",null,"Suppose there is a need to obtain data for the latest blocks. Here is how one can define the variables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"var API_URL = 'https://explorer-api.testnet.routerchain.dev/gql/query';\n\nvar queryTag = `query getLatestBlocks($limit: Int!, $offset: Int!) {\n    paginatedBlock(sortBy:{_id:desc},limit:$limit,offset:$offset){\n        totalRecords\n        blocks{\n        _id\n        hash\n        proposer\n        txn_count\n        timestamp\n        transactions{\n            _id\n            height\n            sender\n            status\n            receiver\n            timeStamp\n            gasWanted\n            gasUsed\n            fee\n            event_logs\n            success\n        }\n        }\n    }\n    }`\n\nvar options = {\n    limit: 10,\n    offset: 10\n}\n")),(0,a.kt)("p",null,"The queryTag parameter corresponds to the query shared in the examples for querying data on the GQL UI. Therefore, the same queries can be reused to create JavaScript code."),(0,a.kt)("p",null,"To read the response, one can utilize the below code snippet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"console.log(response.data.data.paginatedBlock.totalRecords);\nconsole.log(response.data.data.paginatedBlock.blocks[0].hash);\n")),(0,a.kt)("p",null,"This approach allows for data retrieval from our explorer using JavaScript as well."))}u.isMDXComponent=!0}}]);