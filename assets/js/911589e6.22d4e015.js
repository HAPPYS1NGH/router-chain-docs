"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[7792],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"2) Deploying a Sample Application Contract",sidebar_position:2},i=void 0,p={unversionedId:"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",id:"guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",title:"2) Deploying a Sample Application Contract",description:"Part 1: Compiling our Application Contract",source:"@site/docs/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract.md",sourceDirName:"guides/your-first-omnichain-dapp",slug:"/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",permalink:"/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-application-contract.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"2) Deploying a Sample Application Contract",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"1) Setting up Router's EVM Devnet",permalink:"/omnichain-framework/guides/your-first-omnichain-dapp/setting-up-routers-evm-devnet"},next:{title:"3) Deploying a Sample Bridge Contract",permalink:"/omnichain-framework/guides/your-first-omnichain-dapp/deploying-a-sample-bridge-contract"}},s={},c=[{value:"Part 1: Compiling our Application Contract",id:"part-1-compiling-our-application-contract",level:2},{value:"Part 2: Deploying a Compiled Contract",id:"part-2-deploying-a-compiled-contract",level:2}],l={toc:c};function m(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"part-1-compiling-our-application-contract"},"Part 1: Compiling our Application Contract"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," Go to ",(0,a.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"https://remix.ethereum.org/")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," In the File Explorer pane, click on the plus icon under the ",(0,a.kt)("strong",{parentName:"p"},"Workspaces")," tab to create a new workspace."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(88113).Z,alt:"Step 2",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3)")," Under the template option, choose ",(0,a.kt)("strong",{parentName:"p"},"Blank"),", give your workspace an appropriate name and then click on ",(0,a.kt)("strong",{parentName:"p"},"OK"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(99365).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4)")," In your new workspace, create a new file by the name of ",(0,a.kt)("strong",{parentName:"p"},"HelloRouter.sol"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(83748).Z,alt:"Step 4",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 5)")," Copy the following code and paste it into ",(0,a.kt)("strong",{parentName:"p"},"HelloRouter.sol"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport "evm-gateway-contract/contracts/IGateway.sol";\nimport "evm-gateway-contract/contracts/IApplication.sol";\n\ncontract HelloRouter is IApplication {\n    IGateway public gatewayContract;\n    string public greeting;\n\n    event RequestFromRouterEvent(string indexed bridgeContract, bytes data);\n\n    constructor(address payable gatewayAddress) {\n        gatewayContract = IGateway(gatewayAddress);\n    }\n\n    function sendStringPayloadToRouter(\n        string memory sampleString,\n        string memory routerBridgeContract\n    ) external payable {\n        bytes memory stringPaylaod = abi.encode(sampleString);\n        bytes memory payload = abi.encode(1, stringPaylaod);\n        gatewayContract.requestToRouter(payload, routerBridgeContract);\n    }\n    \n    function sendRequestToRouter(\n        uint64 chainType,\n        string memory chainId,\n        address destinationContractAddress,\n        string memory str,\n        string memory routerBridgeContract\n    ) public payable {\n        bytes memory innerPayload = abi.encode(chainType, chainId, str, destinationContractAddress);\n        bytes memory payload = abi.encode(2, innerPayload);\n        gatewayContract.requestToRouter(payload, routerBridgeContract);\n    }\n\n    function handleRequestFromRouter(string memory sender, bytes memory payload) override external {\n        // This check is to ensure that the contract is called from the Gateway only.\n        require(msg.sender == address(gatewayContract));\n        (string memory sampleStr) = abi.decode(payload, (string));\n\n        require(keccak256(abi.encodePacked(sampleStr)) != keccak256(abi.encodePacked("")));\n        greeting = sampleStr;\n        emit RequestFromRouterEvent(sender, payload);\n    }\n\n    receive() external payable {}\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 6)")," Click on the ",(0,a.kt)("strong",{parentName:"p"},"Solidity compiler")," icon (the one shaped like an S), check that your compiler version is within the versions specified in the pragma solidity statement, and click on ",(0,a.kt)("strong",{parentName:"p"},"Compile HelloRouter.sol"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(90610).Z,alt:"Step 6",style:{marginBottom:12}})),(0,a.kt)("p",null,"Once compiled, you should see a green tick mark over the ",(0,a.kt)("strong",{parentName:"p"},"Solidity compiler")," icon."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"part-2-deploying-a-compiled-contract"},"Part 2: Deploying a Compiled Contract"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," Click on the ",(0,a.kt)("strong",{parentName:"p"},"Deploy & run transactions")," icon (the one with the Ethereum logo) and select ",(0,a.kt)("strong",{parentName:"p"},"Injected Provider - Metamask")," as the ",(0,a.kt)("strong",{parentName:"p"},"Environment"),"."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(38725).Z,alt:"Step 1",style:{marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," A MetaMask window will pop up following the previous step. Connect the account that we set up in the guide given ",(0,a.kt)("a",{parentName:"p",href:"./setting-up-routers-evm-devnet#part-2-importing-a-wallet-to-interact-with-the-devnet"},"here"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warning:")," Make sure you're connected to Router's EVM Devnet.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3)")," Add the following gatewayAddress (a required constructor parameter): ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"0xF744a7483cc04F2a224126ebCCf0c87214bD66D2")),", click on ",(0,a.kt)("strong",{parentName:"p"},"Deploy")," and sign the transaction in your MetaMask."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(91646).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,"Sometimes the contract deployment fails due to low gas fees, so make sure to edit the gas fees while signing the transaction in your wallet."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(27347).Z,alt:"Success",style:{marginBottom:12}})))}m.isMDXComponent=!0},38725:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/part-2-step-1-b5a5b49e8dd3220452bf083dad7bebed.png"},91646:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/part-2-step-3-f2839063f0491140a784aa6f0ab2f4fc.png"},88113:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/step-2-bd5c9bbf57fe6894c0b0982168688706.png"},99365:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/step-3-13901af99eb5e31c636a395f286f90d3.png"},83748:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/step-4-239ecbf1cce83339da6d0083470813c9.png"},90610:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/step-6-85f1cba8499522ab11b1d1821709ce8f.png"},27347:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/success-ceeaf26dd7fa6967b3baa65b69ecd414.png"}}]);