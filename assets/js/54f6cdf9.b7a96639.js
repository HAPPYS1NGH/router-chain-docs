"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[1371],{10081:e=>{e.exports=JSON.parse('{"pluginId":"develop","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/develop/","docId":"README"},{"type":"category","label":"Message Transfer via CrossTalk","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/develop/message-transfer-via-crosstalk/overview","docId":"message-transfer-via-crosstalk/overview"},{"type":"category","label":"Key Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"High Level Architecture","href":"/develop/message-transfer-via-crosstalk/key-concepts/high-level-architecture","docId":"message-transfer-via-crosstalk/key-concepts/high-level-architecture"},{"type":"link","label":"Fee Management","href":"/develop/message-transfer-via-crosstalk/key-concepts/fee-management","docId":"message-transfer-via-crosstalk/key-concepts/fee-management"},{"type":"link","label":"Additional Security Modules (ASM)","href":"/develop/message-transfer-via-crosstalk/key-concepts/additional-security-modules","docId":"message-transfer-via-crosstalk/key-concepts/additional-security-modules"}],"href":"/develop/message-transfer-via-crosstalk/key-concepts/"},{"type":"category","label":"EVM Guides","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Build your first Cross-Chain NFT contract","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating a Sample Cross-Chain NFT Contract","href":"/develop/message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/creating-your-nft-contract","docId":"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/creating-your-nft-contract"},{"type":"link","label":"Deploying a Sample Cross-Chain NFT Contract","href":"/develop/message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/deploying-your-nft-contract","docId":"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/deploying-your-nft-contract"}],"href":"/develop/message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/"},{"type":"category","label":"iDapp Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"iSend","href":"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iSend","docId":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iSend"},{"type":"link","label":"iReceive","href":"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iReceive","docId":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iReceive"},{"type":"link","label":"iAck","href":"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck","docId":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck"},{"type":"link","label":"setDappMetadata","href":"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/setDappMetadata","docId":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/setDappMetadata"}],"href":"/develop/message-transfer-via-crosstalk/evm-guides/iDapp-functions/"},{"type":"category","label":"Cross-chain Read Requests","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating and Sending a Cross-chain Read Request","href":"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request","docId":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request"},{"type":"link","label":"Handling the Acknowledgment on the Source Chain","href":"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/handling-the-acknowledgment-on-the-source-chain","docId":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/handling-the-acknowledgment-on-the-source-chain"},{"type":"link","label":"Sample Read Request Contract","href":"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/sample-read-request-contract","docId":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/sample-read-request-contract"}],"href":"/develop/message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/"},{"type":"category","label":"ASM Implementation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Integrate ASM into Your Application","href":"/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application","docId":"message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application"},{"type":"link","label":"Sample Delayed Execution ASM Contract","href":"/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/sample-delayed-execution-asm-contract","docId":"message-transfer-via-crosstalk/evm-guides/asm-implementation/sample-delayed-execution-asm-contract"}],"href":"/develop/message-transfer-via-crosstalk/evm-guides/asm-implementation/"}],"href":"/develop/message-transfer-via-crosstalk/evm-guides/"},{"type":"category","label":"NEAR Guides","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"iDapp Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"i_send","href":"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/i_send","docId":"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_send"},{"type":"link","label":"burn_and_call_gateway","href":"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/burn_and_call_gateway","docId":"message-transfer-via-crosstalk/near-guides/iDapp-functions/burn_and_call_gateway"},{"type":"link","label":"i_receive","href":"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/i_receive","docId":"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_receive"},{"type":"link","label":"i_ack","href":"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/i_ack","docId":"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_ack"},{"type":"link","label":"set_dapp_metadata","href":"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata","docId":"message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata"}],"href":"/develop/message-transfer-via-crosstalk/near-guides/iDapp-functions/"},{"type":"category","label":"ASM Implementation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Integrate ASM into Your Application","href":"/develop/message-transfer-via-crosstalk/near-guides/asm-implementation/integrate-asm-into-your-application","docId":"message-transfer-via-crosstalk/near-guides/asm-implementation/integrate-asm-into-your-application"},{"type":"link","label":"Sample Delayed Execution ASM Contract","href":"/develop/message-transfer-via-crosstalk/near-guides/asm-implementation/sample-delayed-execution-asm-contract","docId":"message-transfer-via-crosstalk/near-guides/asm-implementation/sample-delayed-execution-asm-contract"}],"href":"/develop/message-transfer-via-crosstalk/near-guides/asm-implementation/"}],"href":"/develop/message-transfer-via-crosstalk/near-guides/"},{"type":"category","label":"Router Chain Guides","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"iDapp Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"RouterMsg","href":"/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg","docId":"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg"},{"type":"link","label":"SudoMsg","href":"/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/sudomsg","docId":"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/sudomsg"}],"href":"/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/"}],"href":"/develop/message-transfer-via-crosstalk/router-chain-guides/"},{"type":"category","label":"Stateful (OmniChain) Bridging","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Your First Omnichain dApp","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"1) Setting up Router\'s EVM Tesnet","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet"},{"type":"link","label":"2) Deploying a Sample Application Contract","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract"},{"type":"link","label":"3) Deploying a Sample Bridge Contract","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract"},{"type":"category","label":"4) Testing the End-to-End Workflow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sending an Inbound Request","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request"},{"type":"link","label":"Verifying the Inbound Request","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request"},{"type":"link","label":"Verifying the Outbound Request","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request"},{"type":"link","label":"Verifying the Outbound Ack","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack","docId":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack"}],"href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/"}],"href":"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/"},{"type":"link","label":"Stateful vs Stateless Bridging","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/stateful-vs-stateless-bridging","docId":"message-transfer-via-crosstalk/stateful-bridging/stateful-vs-stateless-bridging"},{"type":"link","label":"Benefits","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/benefits","docId":"message-transfer-via-crosstalk/stateful-bridging/benefits"},{"type":"link","label":"High Level Architecture","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/high-level-architecture","docId":"message-transfer-via-crosstalk/stateful-bridging/high-level-architecture"},{"type":"category","label":"Texchange","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Architecture","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/texchange/architecture","docId":"message-transfer-via-crosstalk/stateful-bridging/texchange/architecture"},{"type":"link","label":"Contracts","href":"/develop/message-transfer-via-crosstalk/stateful-bridging/texchange/contracts","docId":"message-transfer-via-crosstalk/stateful-bridging/texchange/contracts"}],"href":"/develop/message-transfer-via-crosstalk/stateful-bridging/texchange/"}],"href":"/develop/message-transfer-via-crosstalk/stateful-bridging/"},{"type":"category","label":"Sample iDapps","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"On EVM Chains","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cross-chain Ping Pong","href":"/develop/message-transfer-via-crosstalk/sample-idapps/on-evm-chains/ping-pong","docId":"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/ping-pong"},{"type":"link","label":"Cross-chain NFT (ERC-1155)","href":"/develop/message-transfer-via-crosstalk/sample-idapps/on-evm-chains/cross-chain-nft","docId":"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/cross-chain-nft"}],"href":"/develop/message-transfer-via-crosstalk/sample-idapps/on-evm-chains/"},{"type":"category","label":"On NEAR","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cross-chain Ping Pong","href":"/develop/message-transfer-via-crosstalk/sample-idapps/on-near/ping-pong","docId":"message-transfer-via-crosstalk/sample-idapps/on-near/ping-pong"}],"href":"/develop/message-transfer-via-crosstalk/sample-idapps/on-near/"}],"href":"/develop/message-transfer-via-crosstalk/sample-idapps/"},{"type":"link","label":"Helpful Repositories","href":"/develop/message-transfer-via-crosstalk/helpful-repositories","docId":"message-transfer-via-crosstalk/helpful-repositories"}],"href":"/develop/message-transfer-via-crosstalk/"},{"type":"category","label":"Asset Transfer via Voyager","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/develop/voyager/","docId":"voyager/README"},{"type":"category","label":"Understanding Voyager","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Understanding different functions of Voyager","href":"/develop/voyager/understanding-voyager/understanding-different-functions","docId":"voyager/understanding-voyager/understanding-different-functions"},{"type":"link","label":"Transfer of Reserve Tokens","href":"/develop/voyager/understanding-voyager/transfer-reserve-token","docId":"voyager/understanding-voyager/transfer-reserve-token"},{"type":"link","label":"Transfer of Reserve Tokens with Arbitrary Instruction","href":"/develop/voyager/understanding-voyager/transfer-reserve-token-arbitrary-instruction","docId":"voyager/understanding-voyager/transfer-reserve-token-arbitrary-instruction"},{"type":"link","label":"Transfer of Non-Reserve Tokens","href":"/develop/voyager/understanding-voyager/transfer-non-reserve-token","docId":"voyager/understanding-voyager/transfer-non-reserve-token"},{"type":"link","label":"Transfer of Non-Reserve Tokens with Arbitrary Instruction","href":"/develop/voyager/understanding-voyager/transfer-non-reserve-token-arbitrary-instruction","docId":"voyager/understanding-voyager/transfer-non-reserve-token-arbitrary-instruction"},{"type":"link","label":"Transfer of LP Tokens","href":"/develop/voyager/understanding-voyager/transfer-lp-token","docId":"voyager/understanding-voyager/transfer-lp-token"},{"type":"link","label":"Transfer of LP Tokens with Arbitrary Instruction","href":"/develop/voyager/understanding-voyager/transfer-lp-token-arbitrary-instruction","docId":"voyager/understanding-voyager/transfer-lp-token-arbitrary-instruction"},{"type":"link","label":"List of Reserve and LP Tokens","href":"/develop/voyager/understanding-voyager/list-reserve-lp-tokens","docId":"voyager/understanding-voyager/list-reserve-lp-tokens"},{"type":"link","label":"Chain ID Identifiers","href":"/develop/voyager/understanding-voyager/chain-id-identifiers","docId":"voyager/understanding-voyager/chain-id-identifiers"}],"href":"/develop/voyager/understanding-voyager/"},{"type":"category","label":"Building different use-cases using Voyager","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Token Transfer using Voyager Contracts","href":"/develop/voyager/building-different-use-cases/token-transfers","docId":"voyager/building-different-use-cases/token-transfers"},{"type":"link","label":"Sequenced Transfers (tokens + instructions) using Voyager","href":"/develop/voyager/building-different-use-cases/sequenced-transfers","docId":"voyager/building-different-use-cases/sequenced-transfers"}],"href":"/develop/voyager/building-different-use-cases/"},{"type":"link","label":"Fee Model","href":"/develop/voyager/fee-model","docId":"voyager/fee-model"},{"type":"category","label":"Tools","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Voyager Widget","href":"/develop/voyager/tools/voyager-widget/","docId":"voyager/tools/voyager-widget/README"},{"type":"category","label":"Voyager Pathfinder API","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Performing Cross-Chain Transaction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Request a Quote","href":"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/request-quote","docId":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/request-quote"},{"type":"link","label":"Check and Set Allowances","href":"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-set-allowance","docId":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-set-allowance"},{"type":"link","label":"Execute the Transaction","href":"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/execute-transaction","docId":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/execute-transaction"},{"type":"link","label":"Check the Status","href":"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status","docId":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status"}],"href":"/develop/voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/"}],"href":"/develop/voyager/tools/voyager-pathFinder-api/"},{"type":"category","label":"Voyager JS SDK","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installing and Initializing Router SDK","href":"/develop/voyager/tools/voyager-js-sdk/installing-and-initializing-router-sdk","docId":"voyager/tools/voyager-js-sdk/installing-and-initializing-router-sdk"},{"type":"category","label":"Performing a cross-chain transaction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Request a Quote","href":"/develop/voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/request-quote","docId":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/request-quote"},{"type":"link","label":"Check and Set Allowances","href":"/develop/voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-set-allowance","docId":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-set-allowance"},{"type":"link","label":"Execute the Transaction","href":"/develop/voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/execute-transaction","docId":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/execute-transaction"},{"type":"link","label":"Check the Status","href":"/develop/voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-status","docId":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-status"}],"href":"/develop/voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/"}],"href":"/develop/voyager/tools/voyager-js-sdk/"},{"type":"category","label":"Configurations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Supported Chains","href":"/develop/voyager/tools/configurations/supported-chains","docId":"voyager/tools/configurations/supported-chains"},{"type":"link","label":"Native Assets","href":"/develop/voyager/tools/configurations/native-assets","docId":"voyager/tools/configurations/native-assets"},{"type":"link","label":"Chain ID Identifiers (Bytes)","href":"/develop/voyager/tools/configurations/chain-id-identifiers","docId":"voyager/tools/configurations/chain-id-identifiers"}]}],"href":"/develop/voyager/tools/"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Staking Contract using Voyager","href":"/develop/voyager/guides/crosschain-staking","docId":"voyager/guides/crosschain-staking"}]}],"href":"/develop/category/asset-transfer-via-voyager"}]},"docs":{"message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application":{"id":"message-transfer-via-crosstalk/evm-guides/asm-implementation/integrate-asm-into-your-application","title":"Integrate ASM into Your Application","description":"After building your ASM, you can deploy it on the desired chain. To send a request from the source chain to the destination chain, the user needs to call the following function signature.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/asm-implementation/README":{"id":"message-transfer-via-crosstalk/evm-guides/asm-implementation/README","title":"ASM Implementation","description":"To understand how Router ASM works refer here.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/asm-implementation/sample-delayed-execution-asm-contract":{"id":"message-transfer-via-crosstalk/evm-guides/asm-implementation/sample-delayed-execution-asm-contract","title":"Sample Delayed Execution ASM Contract","description":"A delayed execution ASM deliberately delays a cross-chain request by a certain period to force the validation of the request only once a certain amount of time has lapsed. After the request is delayed, the owner has the flexibility to reject the transaction if there is something malicious or invalid with the transaction.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request":{"id":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/creating-and-sending-a-cross-chain-read-request","title":"Creating and Sending a Cross-chain Read Request","description":"To create a cross-chain read request, one needs to call the iSend() function on Router\'s Gateway contract with the following parameters:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/handling-the-acknowledgment-on-the-source-chain":{"id":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/handling-the-acknowledgment-on-the-source-chain","title":"Handling the Acknowledgment on the Source Chain","description":"Once the read request is executed on the destination chain, the requested data is sent along with an acknowledgment to the source chain. To handle the acknowledgment, developers need to include an iAck() function in their contract.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/README":{"id":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/README","title":"Cross-chain Read Requests","description":"One of the most underrated, albeit important, aspects of blockchain interoperability is being able to read the state of contracts present on one chain (say chain A) from a different chain (say chain B). A good example of this could be a Soul-bound Token (SBT). Let us assume that every user gets a SBT on chain A, which contains the user\'s Date of Birth (DoB) information. This information can come in handy for multiple dApps that want to restrict users below a particular age. Creating this SBT on multiple chains will not make sense, but having the information of the SBT across multiple chains is essential for dApps to be able to access this information and use it. To achieve this, applications can use Router to generate a decentralized read request between two chains. This request will include (a) the contract state to read on the destination chain (in this case, the user\'s age) and (b) the operation to be performed when the data is received back on the source chain (in this case, it could be to accept/deny user\'s request to access a gambling application).","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/sample-read-request-contract":{"id":"message-transfer-via-crosstalk/evm-guides/cross-chain-read-requests/sample-read-request-contract","title":"Sample Read Request Contract","description":"This section explains how to create a simple cross-chain read request contract by integrating the Router Gateway contracts. The assumption made here is that a random contract already exists on the destination chain that retrieves a certain value from the source chain.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck":{"id":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iAck","title":"iAck","description":"After executing the iReceive function, an acknowledgment is generated from Router\'s destination chain Gateway contract that specifies whether or not the calls were successful. To handle this acknowledgment, it is necessary to implement an iAck function in the source chain contract. The schema for the function is given below:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iReceive":{"id":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iReceive","title":"iReceive","description":"Once a cross-chain request is initiated from the source chain, the payload will be delivered to the contract address specified in the contractCalls parameter on the destination chain. To handle this payload, a function must be implemented on the destination contract:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iSend":{"id":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/iSend","title":"iSend","description":"This function allows users to configure various aspects of cross-chain message passing based on their requirements. Some of the parameters that can be configured while calling this function include:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/iDapp-functions/README":{"id":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/README","title":"EVM iDapp Functions","description":"The transmission of a cross-chain message is facilitated via the iSend function in Router\'s Gateway contracts. When initiating a cross-chain request, developers can call this function and pass the required parameters along with the payload that needs to be transferred from the source to the destination chain.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/iDapp-functions/setDappMetadata":{"id":"message-transfer-via-crosstalk/evm-guides/iDapp-functions/setDappMetadata","title":"setDappMetadata","description":"- To facilitate cross-chain transactions, it is necessary to pay the fees on the Router chain. This can be achieved using the setDappMetadata function available in the Gateway contracts. The function takes a feePayerAddress parameter, which represents the account responsible for covering the transaction fees for any cross-chain requests originating from the dApp.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/README":{"id":"message-transfer-via-crosstalk/evm-guides/README","title":"EVM Guides","description":"This section will cover how the crosschain framework can be used for EVM contracts to build iDapps. It provides the details around various functions and how they can be implemented using some sample contracts.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/creating-your-nft-contract":{"id":"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/creating-your-nft-contract","title":"Creating a Sample Cross-Chain NFT Contract","description":"To create cross-chain applications using the Router infrastructure, users will have to build and deploy application contracts on various third-party chains. This section describes how to create a cross-chain NFT smart contract.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/deploying-your-nft-contract":{"id":"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/deploying-your-nft-contract","title":"Deploying a Sample Cross-Chain NFT Contract","description":"This section describes how to deploy your NFT smart contract on different EVM-chains and test it by actually transferring your NFTs cross-chain.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/README":{"id":"message-transfer-via-crosstalk/evm-guides/your-first-crosschain-nft-contract/README","title":"Your First iDapp","description":"In this section, we\'ll provide a step-by-step guide for how users can deploy their first iDapp using the Crosstalk framework.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/helpful-repositories":{"id":"message-transfer-via-crosstalk/helpful-repositories","title":"Helpful Repositories","description":"Some repos have been provided below for reference to ease your development efforts while building an iDapp:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/key-concepts/additional-security-modules":{"id":"message-transfer-via-crosstalk/key-concepts/additional-security-modules","title":"Additional Security Modules (ASM)","description":"With ASMs, Router provides developers an option to include additional security safeguards in their cross-chain applications","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/key-concepts/fee-management":{"id":"message-transfer-via-crosstalk/key-concepts/fee-management","title":"Fee Management","description":"Gas and fee payer considerations for CrossTalk","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/key-concepts/high-level-architecture":{"id":"message-transfer-via-crosstalk/key-concepts/high-level-architecture","title":"High Level Architecture","description":"Understanding CrossTalk\'s architecture","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/key-concepts/README":{"id":"message-transfer-via-crosstalk/key-concepts/README","title":"Key Concepts","description":"This section will cover the architecture and some key concepts of the Crosstalk framework.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/asm-implementation/integrate-asm-into-your-application":{"id":"message-transfer-via-crosstalk/near-guides/asm-implementation/integrate-asm-into-your-application","title":"Integrate ASM into Your Application","description":"After building your ASM, you can deploy it on the desired chain. To send a request from the source chain to the destination chain, the user needs to call the following function signature.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/asm-implementation/README":{"id":"message-transfer-via-crosstalk/near-guides/asm-implementation/README","title":"ASM Implementation","description":"To understand how Router ASM works, refer to this link.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/asm-implementation/sample-delayed-execution-asm-contract":{"id":"message-transfer-via-crosstalk/near-guides/asm-implementation/sample-delayed-execution-asm-contract","title":"Sample Delayed Execution ASM Contract","description":"A delayed execution ASM deliberately delays a cross-chain request by a certain period to force the validation of the request only once a certain amount of time has lapsed. After the request is delayed, the owner has the flexibility to reject the transaction if there is something malicious or invalid with the transaction.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/iDapp-functions/burn_and_call_gateway":{"id":"message-transfer-via-crosstalk/near-guides/iDapp-functions/burn_and_call_gateway","title":"burn_and_call_gateway","description":"This is a function in the ROUTE token contract on the NEAR chain. This is used to transfer ROUTE tokens from NEAR to another chain with or without instructions. These parameters include:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_ack":{"id":"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_ack","title":"i_ack","description":"Once the i_receive function is executed, an acknowledgment is generated from Router\'s destination chain Gateway contract, which will specify whether the calls were successful. We need to implement an i_ack function in our contract with the following schema:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_receive":{"id":"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_receive","title":"i_receive","description":"The cross-chain request initiated from the source chain will deliver the payload to the destination contract address specified in the contractCalls parameter. On the destination contract, a function needs to be implemented to handle this payload:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_send":{"id":"message-transfer-via-crosstalk/near-guides/iDapp-functions/i_send","title":"i_send","description":"This function allows users to configure various aspects of cross-chain message passing based on their requirements. Some of the parameters that can be configured while calling this function include:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/iDapp-functions/README":{"id":"message-transfer-via-crosstalk/near-guides/iDapp-functions/README","title":"NEAR iDapp Functions","description":"The transmission of a cross-chain message is facilitated via the i_send function in Router\'s Gateway contract on the NEAR chain. When initiating a cross-chain request on NEAR, developers can call this function and pass the required parameters along with the payload that needs to be transferred from the source to the destination chain.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata":{"id":"message-transfer-via-crosstalk/near-guides/iDapp-functions/set_dapp_metadata","title":"set_dapp_metadata","description":"- To facilitate cross-chain transactions, it is necessary to cover the fees on the Router chain. This is achieved via the setdappmetadata function available in the Gateway contracts. The function takes a feepayeraddress parameter, which represents the account responsible for covering the transaction fees for any cross-chain requests originating from the dApp.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/near-guides/README":{"id":"message-transfer-via-crosstalk/near-guides/README","title":"Near Guides","description":"This section will cover how the crosschain framework can be used for Near contracts to build iDapps. It provides the details around various functions and how they can be implemented.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/overview":{"id":"message-transfer-via-crosstalk/overview","title":"Overview","description":"Intro to the CrossTalk framework","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/README":{"id":"message-transfer-via-crosstalk/README","title":"Message Transfer via Crosstalk","description":"This section of the documentation will provide an in-depth view of the CrossTalk framework.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/README":{"id":"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/README","title":"Router Chain iDapp Functions","description":"To support Router\'s cross-chain functionality on the Router chain, CosmWasm contracts need to have router-wasm-bindings.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg":{"id":"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg","title":"RouterMsg","description":"The RouterMsg is an enum inside router-wasm-bindings. It contains one custom message type - CrosschainCall, which includes the destination chain ID & type, destination contract addresses, payload, the expiry timestamp for the request, the atomicity flag, among other things.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/sudomsg":{"id":"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/sudomsg","title":"SudoMsg","description":"The SudoMsg is an enum with two different message types:","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/router-chain-guides/README":{"id":"message-transfer-via-crosstalk/router-chain-guides/README","title":"Router Chain Guides","description":"This section will cover how the crosschain framework can be used for Router chain contracts to build iDapps. It provides the details around various functions and how they can be implemented.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/cross-chain-nft":{"id":"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/cross-chain-nft","title":"Cross-chain NFT (ERC-1155)","description":"A cross-chain ERC-1155 using Router CrossTalk","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/ping-pong":{"id":"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/ping-pong","title":"Cross-chain Ping Pong","description":"A simple ping pong dApp using Router CrossTalk","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/README":{"id":"message-transfer-via-crosstalk/sample-idapps/on-evm-chains/README","title":"Sample EVM iDapps","description":"This section will include a step-by-step guide to building EVM iDapps by leveraging Router\'s infra.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/sample-idapps/on-near/ping-pong":{"id":"message-transfer-via-crosstalk/sample-idapps/on-near/ping-pong","title":"Cross-chain Ping Pong","description":"A simple ping pong dApp using Router CrossTalk","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/sample-idapps/on-near/README":{"id":"message-transfer-via-crosstalk/sample-idapps/on-near/README","title":"Sample Near iDapps","description":"This section will include a step-by-step guide to building Near iDapps by leveraging Router\'s infra.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/sample-idapps/README":{"id":"message-transfer-via-crosstalk/sample-idapps/README","title":"Overview","description":"This section will include a step-by-step guide to building truly cross-chain dApps by leveraging Router\'s infra. We\'ll showcase this guide with the help of some basic cross-chain applications like cross-chain Ping Pong (message transfer) and cross-chain ERC1155 (NFT transfer). This guide will make use of the cross-chain communication framework described earlier and will include code snippets and explanations for each step involved in the process.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/benefits":{"id":"message-transfer-via-crosstalk/stateful-bridging/benefits","title":"Benefits","description":"Some benefits of stateful bridging","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/high-level-architecture":{"id":"message-transfer-via-crosstalk/stateful-bridging/high-level-architecture","title":"High Level Architecture","description":"Understanding the stateful bridging architecture","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/README":{"id":"message-transfer-via-crosstalk/stateful-bridging/README","title":"Stateful (OmniChain) Bridging","description":"This section will cover how the Router\'s infra supports stateful bridging. It will also go through the advantages stateful bridging provides and how an Omnichain iDapp can be built.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/stateful-vs-stateless-bridging":{"id":"message-transfer-via-crosstalk/stateful-bridging/stateful-vs-stateless-bridging","title":"Stateful vs Stateless Bridging","description":"Difference between stateful and stateless bridging","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/texchange/architecture":{"id":"message-transfer-via-crosstalk/stateful-bridging/texchange/architecture","title":"Architecture","description":"Functionality","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/texchange/contracts":{"id":"message-transfer-via-crosstalk/stateful-bridging/texchange/contracts","title":"Contracts","description":"Testnet Contracts","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/texchange/README":{"id":"message-transfer-via-crosstalk/stateful-bridging/texchange/README","title":"TExchange","description":"Background","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract","title":"2) Deploying a Sample Application Contract","description":"Part 1: Compiling our Application Contract","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract","title":"3) Deploying a Sample Bridge Contract","description":"Part 1: Cloning & Compiling our Bridge Contract","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/README":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/README","title":"Your First OmniChain dApp","description":"In this section, we\'ll provide a step-by-step guide for how users can deploy their first cross-chain dApp that leverages the middleware infra enabled by the Router chain.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/setting-up-routers-evm-testnet","title":"1) Setting up Router\'s EVM Tesnet","description":"To create cross-chain applications using the Router infrastructure, users will have to build and deploy application contracts on various third-party chains. To simulate an EVM environment for smart contract deployment and interaction, we have created Router\'s own EVM-compatible Testnet.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/README":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/README","title":"4) Testing the End-to-End Workflow","description":"Now that we have deployed all the relevant contracts, it\'s time to test them out.","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/sending-an-inbound-request","title":"Sending an Inbound Request","description":"","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-inbound-request","title":"Verifying the Inbound Request","description":"","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-ack","title":"Verifying the Outbound Ack","description":"","sidebar":"tutorialSidebar"},"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request":{"id":"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/verifying-the-outbound-request","title":"Verifying the Outbound Request","description":"","sidebar":"tutorialSidebar"},"README":{"id":"README","title":"Introduction","description":"The guides on this page will explain the process of developing on Router\'s CrossTalk and Voyager framework. The CrossTalk framework","sidebar":"tutorialSidebar"},"voyager/building-different-use-cases/README":{"id":"voyager/building-different-use-cases/README","title":"Building different use-cases using Voyager","description":"The Voyager can be used for cross-chain token transfers as well as sequencing the token transfers and arbitrary instructions. In this section, we will understand how to integrate the Voyager\u2019s functionalities into your contracts and building these 2 different types of use-cases.","sidebar":"tutorialSidebar"},"voyager/building-different-use-cases/sequenced-transfers":{"id":"voyager/building-different-use-cases/sequenced-transfers","title":"Sequenced Transfers (tokens + instructions) using Voyager","description":"As we discussed in the previous section, the Voyager allows us to transfer tokens as well as sequence token transfers and arbitrary instructions. In this section, we will explore how you can integrate the Voyager into your smart contracts for sequencing cross-chain token transfers and arbitrary instructions.","sidebar":"tutorialSidebar"},"voyager/building-different-use-cases/token-transfers":{"id":"voyager/building-different-use-cases/token-transfers","title":"Token Transfer using Voyager Contracts","description":"As we discussed in the previous section, the Voyager allows us to transfer tokens as well as sequence token transfers and arbitrary instructions. In this section, we will explore how you can integrate the Voyager into your smart contracts for cross-chain token transfers.","sidebar":"tutorialSidebar"},"voyager/fee-model":{"id":"voyager/fee-model","title":"Fee Model","description":"For an Asset Transfer Request","sidebar":"tutorialSidebar"},"voyager/guides/crosschain-staking":{"id":"voyager/guides/crosschain-staking","title":"Staking Contract using Voyager","description":"In this section, we shall create a simple cross-chain staking dapp using the voyager sequencer. We shall follow the instructions provided in the previous section to create the same. It consists of two smart contracts: Vault and Stake.","sidebar":"tutorialSidebar"},"voyager/README":{"id":"voyager/README","title":"Overview","description":"Intro to Voyager","sidebar":"tutorialSidebar"},"voyager/tools/configurations/chain-id-identifiers":{"id":"voyager/tools/configurations/chain-id-identifiers","title":"Chain ID Identifiers (Bytes)","description":"| Chain          | Chain ID | Chain ID Identifier                                                  |","sidebar":"tutorialSidebar"},"voyager/tools/configurations/native-assets":{"id":"voyager/tools/configurations/native-assets","title":"Native Assets","description":"Testnet","sidebar":"tutorialSidebar"},"voyager/tools/configurations/supported-chains":{"id":"voyager/tools/configurations/supported-chains","title":"Supported Chains","description":"Testnet","sidebar":"tutorialSidebar"},"voyager/tools/README":{"id":"voyager/tools/README","title":"README","description":"\x3c!-- # Voyager Tools","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/installing-and-initializing-router-sdk":{"id":"voyager/tools/voyager-js-sdk/installing-and-initializing-router-sdk","title":"Installing and Initializing Router SDK","description":"Install Router SDK into your JavaScript development environment by running the following command in your terminal:","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-set-allowance":{"id":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-set-allowance","title":"Check and Set Allowances","description":"You need to provide allowance for the wrapped version of the native asset to perform native asset transfers/swaps.","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-status":{"id":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/check-status","title":"Check the Status","description":"Unlike the Asset Swap API, there is no need to provide chainId while querying the status using the SDK as the chainId is included while initializing the RouterProtocol instance.","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/execute-transaction":{"id":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/execute-transaction","title":"Execute the Transaction","description":"Example","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/README":{"id":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/README","title":"Performing a cross-chain transaction","description":"Performing a cross-chain transaction using Router\'s asset-swap API involves four [steps]:","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/request-quote":{"id":"voyager/tools/voyager-js-sdk/performing-cross-chain-transaction/request-quote","title":"Request a Quote","description":"For transferring native assets, use the native token addresses given here.","sidebar":"tutorialSidebar"},"voyager/tools/voyager-js-sdk/README":{"id":"voyager/tools/voyager-js-sdk/README","title":"Voyager JS SDK","description":"SDK to integrate Voyager\'s cross-chain swap functionality","sidebar":"tutorialSidebar"},"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-set-allowance":{"id":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-set-allowance","title":"Check and Set Allowances","description":"Prior to initiating a transaction using any web3 library (ethers.js or web3.js), users must make sure that Router\'s Reserve Token Handler has the appropriate permissions to use the requested asset in their wallet. You can achieve this via the following piece of code:","sidebar":"tutorialSidebar"},"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status":{"id":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/check-status","title":"Check the Status","description":"After executing a cross-chain transaction, you can also check its status by querying the following API:","sidebar":"tutorialSidebar"},"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/execute-transaction":{"id":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/execute-transaction","title":"Execute the Transaction","description":"Now that we have received the quote and given allowance to Router\'s Reserve Token Handler, it\'s time to execute the transaction.","sidebar":"tutorialSidebar"},"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/README":{"id":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/README","title":"Performing a cross-chain transaction","description":"Performing a cross-chain transaction using Router\'s asset-swap API involves four [steps]:","sidebar":"tutorialSidebar"},"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/request-quote":{"id":"voyager/tools/voyager-pathFinder-api/performing-cross-chain-transaction/request-quote","title":"Request a Quote","description":"If all the required parameters are valid, the Pathfinder API will always return a path.","sidebar":"tutorialSidebar"},"voyager/tools/voyager-pathFinder-api/README":{"id":"voyager/tools/voyager-pathFinder-api/README","title":"Voyager Pathfinder API","description":"","sidebar":"tutorialSidebar"},"voyager/tools/voyager-widget/README":{"id":"voyager/tools/voyager-widget/README","title":"Voyager Widget","description":"Widget to integrate cross-chain swaps on your website","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/chain-id-identifiers":{"id":"voyager/understanding-voyager/chain-id-identifiers","title":"Chain ID Identifiers","description":"Testnet","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/list-reserve-lp-tokens":{"id":"voyager/understanding-voyager/list-reserve-lp-tokens","title":"List of Reserve and LP Tokens","description":"Testnet Addresses","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/README":{"id":"voyager/understanding-voyager/README","title":"Understanding Voyager","description":"Architecture","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/transfer-lp-token":{"id":"voyager/understanding-voyager/transfer-lp-token","title":"Transfer of LP Tokens","description":"LP tokens are the tokens for which wrapped versions were created by the Voyager. These tokens are received when a user provides liquidity to the Voyager. These are pegged one-to-one to the underlying asset and can be redeemed on the Voyager.","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/transfer-lp-token-arbitrary-instruction":{"id":"voyager/understanding-voyager/transfer-lp-token-arbitrary-instruction","title":"Transfer of LP Tokens with Arbitrary Instruction","description":"The flow is just the same as that of the LP token transfer explained above. The only difference here is the arbitrary data that you need to pass and state whether the tokens that need to be swapped are to be deducted from the user or the application for which the details can be found here.","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/transfer-non-reserve-token":{"id":"voyager/understanding-voyager/transfer-non-reserve-token","title":"Transfer of Non-Reserve Tokens","description":"Non-Reserve tokens include all those tokens which are not kept as reserve tokens for the Voyager and are not the LP tokens for any of these reserve tokens. These can be any random token.","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/transfer-non-reserve-token-arbitrary-instruction":{"id":"voyager/understanding-voyager/transfer-non-reserve-token-arbitrary-instruction","title":"Transfer of Non-Reserve Tokens with Arbitrary Instruction","description":"The flow is just the same as that of the Non-Reserve token transfer explained in previous section. The only difference here is the arbitrary data that you need to pass and state whether the tokens that need to be swapped are to be deducted from the user or the application for which the details can be found here.","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/transfer-reserve-token":{"id":"voyager/understanding-voyager/transfer-reserve-token","title":"Transfer of Reserve Tokens","description":"Reserve tokens are the tokens that have been kept in reserve by the Voyager protocol. The Voyager keeps reserves of some selected tokens on each chain so that it is able to provide fund transfers by locking funds on source chain and unlocking the funds on the destination chain. These include some stable tokens, wrapped native tokens for that chain as well as other tokens according to the needs as well as partnerships of projects with the Voyager .","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/transfer-reserve-token-arbitrary-instruction":{"id":"voyager/understanding-voyager/transfer-reserve-token-arbitrary-instruction","title":"Transfer of Reserve Tokens with Arbitrary Instruction","description":"The flow is just the same as that of the reserve token transfer explained before. The only difference here is the arbitrary data that you need to pass and state whether the tokens that need to be swapped are to be deducted from the user or the application.","sidebar":"tutorialSidebar"},"voyager/understanding-voyager/understanding-different-functions":{"id":"voyager/understanding-voyager/understanding-different-functions","title":"Understanding different functions of Voyager","description":"The Voyager Deposit Handler contract has six user facing functions which we will discuss in detail in this section:","sidebar":"tutorialSidebar"}}}')}}]);