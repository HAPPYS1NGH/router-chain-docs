"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[5077],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),g=a,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},61798:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={title:"3) Deploying a Sample Bridge Contract",sidebar_position:3},i=void 0,l={unversionedId:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract",id:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract",title:"3) Deploying a Sample Bridge Contract",description:"Part 1: Cloning & Compiling our Bridge Contract",source:"@site/docs/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract.md",sourceDirName:"message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp",slug:"/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-bridge-contract.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"3) Deploying a Sample Bridge Contract",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"2) Deploying a Sample Application Contract",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/deploying-a-sample-application-contract"},next:{title:"4) Testing the End-to-End Workflow",permalink:"/develop/message-transfer-via-crosstalk/stateful-bridging/your-first-omnichain-dapp/testing-the-end-to-end-workflow/"}},s={},p=[{value:"Part 1: Cloning &amp; Compiling our Bridge Contract",id:"part-1-cloning--compiling-our-bridge-contract",level:2},{value:"Part 2: Deploying and Instantiating our Bridge Contract",id:"part-2-deploying-and-instantiating-our-bridge-contract",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"part-1-cloning--compiling-our-bridge-contract"},"Part 1: Cloning & Compiling our Bridge Contract"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," Make sure that you have installed all the prerequisites mentioned ",(0,a.kt)("a",{href:"../../../router-core/installing-prerequisites",target:"_blank"},"here"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," Clone this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/router-protocol/routerchain-e2e-tests"},"repository")," on your system:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/router-protocol/routerchain-e2e-tests.git\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3)")," Change the directory to the middleware folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd routerchain-e2e-tests/middleware\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4)")," Run the following command to create an optimized wasm binary:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"On Mac/Linux"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -v "$(pwd)":/code \\\n  --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \\\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\n  cosmwasm/workspace-optimizer:0.12.6\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"On an arm64 Machine (e.g. Apple's M1, M2)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -v "$(pwd)":/code \\\n  --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \\\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\n  cosmwasm/workspace-optimizer-arm64:0.12.6\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"On Windows 10"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -v ${pwd}:/code `\n  --mount type=volume,source="$("$(Split-Path -Path $pwd -Leaf)")_cache",target=/code/target `\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry `\n  cosmwasm/rust-optimizer:0.12.6e\n'))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warning:")," Make sure your Docker is running before initiating the aforementioned command.")),(0,a.kt)("p",null,"Following this command, a new wasm binary will be created under the folder ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts"),"."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"part-2-deploying-and-instantiating-our-bridge-contract"},"Part 2: Deploying and Instantiating our Bridge Contract"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1)")," To deploy our contract, we first need an account with some gas tokens on the Router chain. Follow the guide given ",(0,a.kt)("a",{href:"../../../router-core/guides/your-first-contract#step-2-setting-up-an-account",target:"_blank"},"here")," to set up a working account."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2)")," Once the wallet is set up and has some funds, go to the ",(0,a.kt)("a",{parentName:"p",href:"https://devnet-router-station.routerprotocol.com/"},"Router station")," and click on ",(0,a.kt)("strong",{parentName:"p"},"Add contract"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3)")," Choose the ",(0,a.kt)("strong",{parentName:"p"},"From file")," option and upload your ",(0,a.kt)("inlineCode",{parentName:"p"},"hello_router-aarch64.wasm"),"  file."),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(23829).Z,alt:"Step 3",style:{width:300,marginBottom:12}})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warning:")," You'll find this file in this directory: ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"routerchain-e2e-tests/middleware/artifacts/")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4)")," Add a label and an empty JSON as the instantiation message:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"{}\n")),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(34017).Z,alt:"Step 4",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 5)")," Click on the ",(0,a.kt)("strong",{parentName:"p"},"Upload and Instantiate")," button."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warning:")," Please do not cancel/refresh while the contract gets deployed and instantiated.")),(0,a.kt)("p",null,"Following this step, your newly deployed contract will be visible under the ",(0,a.kt)("strong",{parentName:"p"},"Contracts")," section."),(0,a.kt)("center",null,(0,a.kt)("img",{src:r(69756).Z,alt:"Newly Deployed Contract",style:{width:300,marginBottom:12}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 6)")," Add funds to your newly deployed contract using the ",(0,a.kt)("a",{parentName:"p",href:"https://devnet-faucet.routerprotocol.com/"},"devnet faucet"),"."))}u.isMDXComponent=!0},69756:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/check-a7ab8a3663294e60eede9535b2cd6b8b.png"},23829:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/step-3-5f2b5c7d90e47db787692a89b082c93f.png"},34017:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/step-4-f86f109c3ac34368418938477c7a5db5.png"}}]);