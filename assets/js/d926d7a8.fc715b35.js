"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[122],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(g,i(i({ref:t},l),{},{components:n})):a.createElement(g,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},57740:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={title:"RouterMsg",sidebar_position:1},i=void 0,o={unversionedId:"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg",id:"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg",title:"RouterMsg",description:"The RouterMsg is an enum inside router-wasm-bindings. It contains one custom message type - CrosschainCall, which includes the destination chain ID & type, destination contract addresses, payload, the expiry timestamp for the request, the atomicity flag, among other things.",source:"@site/docs/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg.md",sourceDirName:"message-transfer-via-crosstalk/router-chain-guides/iDapp-functions",slug:"/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg",permalink:"/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/routermsg.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"RouterMsg",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Router Chain iDapp Functions",permalink:"/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/"},next:{title:"SudoMsg",permalink:"/develop/message-transfer-via-crosstalk/router-chain-guides/iDapp-functions/sudomsg"}},p={},c=[{value:"Sample Implementation of <code>CrosschainCall</code>",id:"sample-implementation-of-crosschaincall",level:2}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RouterMsg")," is an enum inside ",(0,r.kt)("inlineCode",{parentName:"p"},"router-wasm-bindings"),". It contains one custom message type - ",(0,r.kt)("inlineCode",{parentName:"p"},"CrosschainCall"),", which includes the destination chain ID & type, destination contract addresses, payload, the expiry timestamp for the request, the atomicity flag, among other things. "),(0,r.kt)("h2",{id:"sample-implementation-of-crosschaincall"},"Sample Implementation of ",(0,r.kt)("inlineCode",{parentName:"h2"},"CrosschainCall")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// import router binding message\nuse router_wasm_bindings::{RouterMsg, SudoMsg};\nuse router_wasm_bindings::types::{\n    AckType, RequestMetaData,\n};\nuse cosmwasm_std::{SubMsg, SubMsgResult, Uint128};\n\nlet request_packet: Bytes = encode(&[\n    Token::String(destination_address.clone()),\n    Token::Bytes(payload),\n]);\nlet request_metadata: RequestMetaData = RequestMetaData {\n    dest_gas_limit: gas_limit,\n    dest_gas_price: gas_price,\n    ack_gas_limit: 300_000,\n    ack_gas_price: 10_000_000,\n    relayer_fee: Uint128::zero(),\n    ack_type: AckType::AckOnBoth,\n    is_read_call: false,\n    asm_address: String::default(),\n};\n\nlet i_send_request: RouterMsg = RouterMsg::CrosschainCall {\n    version: 1,\n    route_amount,\n    route_recipient,\n    dest_chain_id: destination_chain_id,\n    request_metadata: request_metadata.get_abi_encoded_bytes(),\n    request_packet,\n};\n\nlet cross_chain_sub_msg: SubMsg<RouterMsg> = SubMsg {\n    id: CREATE_OUTBOUND_REPLY_ID,\n    msg: i_send_request.into(),\n    gas_limit: None,\n    reply_on: ReplyOn::Success,\n};\nlet res = Response::new()\n    .add_submessage(cross_chain_sub_msg.into())\nOk(res)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CrosschainCall")," is a data type that helps end users create a cross-chain request to any destination chain. It takes 6 arguments:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1) ",(0,r.kt)("inlineCode",{parentName:"strong"},"version")," -")," The network type of the chain to which the request needs to be sent. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2) ",(0,r.kt)("inlineCode",{parentName:"strong"},"route_amount")," -")," The ROUTE token amount that needs to be sent to the destination chain. To send ROUTE tokens to the specified destinaton chain, ROUTE will be burnt on the Router chain and minted on the destination chain."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3) ",(0,r.kt)("inlineCode",{parentName:"strong"},"route_recipient")," -")," The recipient address of the ROUTE token on the destination chain."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4) ",(0,r.kt)("inlineCode",{parentName:"strong"},"destination_chain_id")," -")," The network ID of the chain to which the request needs to be sent. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"5) ",(0,r.kt)("inlineCode",{parentName:"strong"},"request_metadata")," -")," The request metadata is encoded data that includes ",(0,r.kt)("inlineCode",{parentName:"p"},"dest_gas_limit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dest_gas_price"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ack_gas_limit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ack_gas_price"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"relayer_fee"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ack_type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"is_read_call")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"asm_address"),". Further details for each one of these parameters can be found ",(0,r.kt)("a",{parentName:"p",href:"../../near-guides/iDapp-functions/i_send#3-request_metadata"},"here"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"6) ",(0,r.kt)("inlineCode",{parentName:"strong"},"request_packet")," -")," The request packet is encoded data that includes ",(0,r.kt)("inlineCode",{parentName:"p"},"destination_address")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),". In the example given above, you can see how this encoding needs to be performed. Further detals for both of these parameters can be found ",(0,r.kt)("a",{parentName:"p",href:"../../near-guides/iDapp-functions/i_send#4-request_packet"},"here"),"."))}u.isMDXComponent=!0}}]);