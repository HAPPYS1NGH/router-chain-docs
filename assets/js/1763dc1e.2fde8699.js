"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[3206],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,h=d["".concat(c,".").concat(f)]||d[f]||l[f]||i;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},12437:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={title:"Cross-chain Meta Transactions",sidebar_position:5},o=void 0,s={unversionedId:"cross-chain-meta-transactions",id:"cross-chain-meta-transactions",title:"Cross-chain Meta Transactions",description:"With Router V2, we are coming up with a first-of-its-kind cross-chain meta-transaction capability. While sending an Inbound Request (or a CrossTalk Request), users/applications can configure a feePayer parameter, which specifies the address from which the fee is to be deducted on the Router chain. This parameter can be set to either one of the following: (a) the user address, (b) the application contract address, or (c) NONE. After a request is marked as validated by the Router chain, if the feePayer address is set to NONE, then any entity on the Router chain can function as the feePayer by sending a PayFee tx. By delegating the execution of a request to a third-party service, applications can enable feeless cross-chain transactions for their end users.",source:"@site/docs/omnichain-framework/cross-chain-meta-transactions.md",sourceDirName:".",slug:"/cross-chain-meta-transactions",permalink:"/omnichain-framework/cross-chain-meta-transactions",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/omnichain-framework/cross-chain-meta-transactions.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Cross-chain Meta Transactions",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Fee Management",permalink:"/omnichain-framework/fee-management"},next:{title:"Guides",permalink:"/omnichain-framework/category/guides"}},c={},p=[],u={toc:p};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"With Router V2, we are coming up with a first-of-its-kind cross-chain meta-transaction capability. While sending an Inbound Request (or a CrossTalk Request), users/applications can configure a ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer")," parameter, which specifies the address from which the fee is to be deducted on the Router chain. This parameter can be set to either one of the following: (a) the user address, (b) the application contract address, or (c) ",(0,a.kt)("inlineCode",{parentName:"p"},"NONE"),". After a request is marked as validated by the Router chain, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer")," address is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"NONE"),", then any entity on the Router chain can function as the ",(0,a.kt)("inlineCode",{parentName:"p"},"feePayer")," by sending a ",(0,a.kt)("inlineCode",{parentName:"p"},"PayFee")," tx. By delegating the execution of a request to a third-party service, applications can enable feeless cross-chain transactions for their end users."))}l.isMDXComponent=!0}}]);